# -*- coding: utf-8 -*-
import os
import sys

# Set console encoding to UTF-8 for Windows
if sys.platform.startswith('win'):
    try:
        # Try to set console to UTF-8
        os.system('chcp 65001 > nul')
    except:
        pass

import customtkinter as ctk
from tkinter import filedialog
import threading
import os
import sys
import time
from datetime import datetime
import json
import re

# Add the parent directory to the path to make absolute imports work
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
if parent_dir not in sys.path:
    sys.path.insert(0, parent_dir)

try:
    from .custom_dialogs import show_success, show_error, show_warning, show_question, show_toast_success, show_toast_error
except ImportError:
    try:
        from custom_dialogs import show_success, show_error, show_warning, show_question, show_toast_success, show_toast_error
    except ImportError:
        # Fallback to standard messagebox if custom dialogs not available
        from tkinter import messagebox
        def show_success(msg, details=None, parent=None):
            return messagebox.showinfo("Th√†nh c√¥ng", msg)
        def show_error(msg, details=None, parent=None):
            return messagebox.showerror("L·ªói", msg)
        def show_warning(msg, details=None, parent=None):
            return messagebox.showwarning("C·∫£nh b√°o", msg)
        def show_question(msg, details=None, parent=None):
            return messagebox.askyesno("X√°c nh·∫≠n", msg)
        def show_toast_success(msg, duration=3000):
            return messagebox.showinfo("Th√†nh c√¥ng", msg)
        def show_toast_error(msg, duration=3000):
            return messagebox.showerror("L·ªói", msg)

try:
    from PIL import Image, ImageTk
except ImportError:
    Image = None
    ImageTk = None

# Set appearance mode and color theme
ctk.set_appearance_mode("dark")  # Modes: "System" (standard), "Dark", "Light"
ctk.set_default_color_theme("blue")  # Themes: "blue" (standard), "green", "dark-blue"

# Import translate functions
TRANSLATE_AVAILABLE = False
EPUB_AVAILABLE = False

# Try relative imports first (when run as module)
try:
    # Import OpenRouter translate functions instead of original translate
    from ..core.translate import translate_file_optimized, generate_output_filename, set_stop_translation, clear_stop_translation, is_translation_stopped, is_quota_exceeded, validate_api_key_before_translation
    from ..core.reformat import fix_text_format
    from ..core.ConvertEpub import txt_to_docx, docx_to_epub
    TRANSLATE_AVAILABLE = True
    EPUB_AVAILABLE = True
except ImportError:
    # Try absolute imports (when run directly)
    try:
        # Import OpenRouter translate functions instead of original translate
        from core.translate import translate_file_optimized, generate_output_filename, set_stop_translation, clear_stop_translation, is_translation_stopped, is_quota_exceeded, validate_api_key_before_translation
        from core.reformat import fix_text_format
        from core.ConvertEpub import txt_to_docx, docx_to_epub
        TRANSLATE_AVAILABLE = True
        EPUB_AVAILABLE = True
    except ImportError as e:
        print(f"‚ö†Ô∏è L·ªói import: {e}")
        print("‚ö†Ô∏è M·ªôt s·ªë ch·ª©c nƒÉng c√≥ th·ªÉ kh√¥ng ho·∫°t ƒë·ªông")
        
        # Define fallback functions
        def translate_file_optimized(*args, **kwargs):
            print("‚ùå Ch·ª©c nƒÉng d·ªãch kh√¥ng kh·∫£ d·ª•ng")
            return False
            
        def generate_output_filename(input_file):
            """Generate output filename as fallback"""
            base_name = os.path.splitext(input_file)[0]
            return f"{base_name}_translated.txt"
        
        def set_stop_translation():
            print("‚ùå Ch·ª©c nƒÉng d·ª´ng d·ªãch kh√¥ng kh·∫£ d·ª•ng")
            
        def clear_stop_translation():
            print("‚ùå Ch·ª©c nƒÉng d·ª´ng d·ªãch kh√¥ng kh·∫£ d·ª•ng")
            
        def is_translation_stopped():
            return False
            
        def is_quota_exceeded():
            return False
            
        def validate_api_key_before_translation(*args, **kwargs):
            print("‚ùå Ch·ª©c nƒÉng test API kh√¥ng kh·∫£ d·ª•ng")
            return False, "Module d·ªãch kh√¥ng kh·∫£ d·ª•ng"
            
        def fix_text_format(*args, **kwargs):
            print("‚ùå Ch·ª©c nƒÉng reformat kh√¥ng kh·∫£ d·ª•ng")
            return False
            
        def txt_to_docx(*args, **kwargs):
            print("‚ùå Ch·ª©c nƒÉng convert DOCX kh√¥ng kh·∫£ d·ª•ng")
            return False
            
        def docx_to_epub(*args, **kwargs):
            print("‚ùå Ch·ª©c nƒÉng convert EPUB kh√¥ng kh·∫£ d·ª•ng")
            return False

class LogCapture:
    """Class ƒë·ªÉ capture print statements v√† chuy·ªÉn v·ªÅ GUI"""
    def __init__(self, gui_log_function):
        self.gui_log = gui_log_function
        self.terminal = sys.stdout
        
    def write(self, message):
        if self.terminal is not None:
            try:
                self.terminal.write(message)
                self.terminal.flush()
            except:
                pass
        
        if message.strip() and self.gui_log is not None:
            try:
                self.gui_log(message.strip())
            except:
                pass
    
    def flush(self):
        if self.terminal is not None:
            try:
                self.terminal.flush()
            except:
                pass

class ModernTranslateNovelAI(ctk.CTk):
    def __init__(self):
        super().__init__()
        
        # Configure window
        self.title("ü§ñ TranslateNovelAI - Modern Edition")
        self.geometry("1100x650")
        self.minsize(1000, 600)
        
        # Variables
        self.input_file_var = ctk.StringVar()
        self.output_file_var = ctk.StringVar()
        self.api_provider_var = ctk.StringVar(value="OpenRouter")  # OpenRouter ho·∫∑c Google AI
        self.openrouter_key_var = ctk.StringVar()
        self.google_ai_key_var = ctk.StringVar()
        self.google_ai_paid_key_var = ctk.StringVar()
        self.google_key_usage_var = ctk.StringVar(value="Free Keys")
        self.api_key_var = ctk.StringVar()  # Key hi·ªán t·∫°i ƒëang d√πng (deprecated, gi·ªØ l·∫°i ƒë·ªÉ t∆∞∆°ng th√≠ch)
        self.model_var = ctk.StringVar(value="anthropic/claude-3.5-sonnet")
        self.context_var = ctk.StringVar(value="B·ªëi c·∫£nh hi·ªán ƒë·∫°i")
        self.auto_reformat_var = ctk.BooleanVar(value=True)
        self.auto_convert_epub_var = ctk.BooleanVar(value=False)
        self.book_title_var = ctk.StringVar()
        self.book_author_var = ctk.StringVar(value="Unknown Author")
        self.chapter_pattern_var = ctk.StringVar(value="Ch∆∞∆°ng XX:")
        self.custom_chapter_pattern_var = ctk.StringVar(value=r"^Ch∆∞∆°ng\s+\d+:\s+.*$")
        self.threads_var = ctk.StringVar()
        self.chunk_size_var = ctk.StringVar(value="100")
        
        # Saved custom models list
        self.saved_custom_models = []
        
        # Model settings storage
        self.model_settings = {}
        
        # Auto-detect optimal threads on startup
        self.auto_detect_threads(silent=True)
        
        # Translation state
        self.is_translating = False
        self.translation_thread = None
        self.total_chunks = 0
        self.completed_chunks = 0
        self.start_time = 0
        
        # Log capture
        self.original_stdout = sys.stdout
        self.log_capture = None
        
        # Setup GUI
        self.setup_gui()
        
        # Load settings
        self.load_settings()
        
        # Update appearance buttons after loading
        self.after(100, self.update_appearance_buttons)
        
    def setup_gui(self):
        """Thi·∫øt l·∫≠p giao di·ªán ch√≠nh"""
        # Configure grid layout (3x1)
        self.grid_columnconfigure(1, weight=1)
        self.grid_rowconfigure(0, weight=1)
        
        # Create sidebar frame
        self.setup_sidebar()
        
        # Create main content frame
        self.setup_main_content()
        
        # Create right panel (logs)
        self.setup_right_panel()
        
    def setup_sidebar(self):
        """Thi·∫øt l·∫≠p sidebar b√™n tr√°i v·ªõi scroll"""
        # Create container for sidebar
        self.sidebar_container = ctk.CTkFrame(self, width=280, corner_radius=0, fg_color="transparent")
        self.sidebar_container.grid(row=0, column=0, sticky="nsew", padx=(0, 10))
        self.sidebar_container.grid_columnconfigure(0, weight=1)
        self.sidebar_container.grid_rowconfigure(0, weight=1)
        
        # Create scrollable sidebar inside container
        self.sidebar_frame = ctk.CTkScrollableFrame(
            self.sidebar_container, 
            width=280, 
            corner_radius=0,
            scrollbar_button_color=("gray70", "gray30"),
            scrollbar_button_hover_color=("gray60", "gray40")
        )
        self.sidebar_frame.grid(row=0, column=0, sticky="nsew", padx=2, pady=2)
        self.sidebar_frame.grid_columnconfigure(0, weight=1)
        
        # App title
        self.logo_label = ctk.CTkLabel(
            self.sidebar_frame,
            text="ü§ñ TranslateNovelAI",
            font=ctk.CTkFont(size=24, weight="bold")
        )
        self.logo_label.grid(row=0, column=0, padx=20, pady=(10, 5), sticky="ew")
        
        self.version_label = ctk.CTkLabel(
            self.sidebar_frame,
            text="Modern Edition v1.2.0 By DoLuPhi",
            font=ctk.CTkFont(size=12)
        )
        self.version_label.grid(row=1, column=0, padx=20, pady=(0, 15), sticky="ew")
        
        # API Configuration
        self.api_label = ctk.CTkLabel(
            self.sidebar_frame,
            text="üîë API Configuration",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        self.api_label.grid(row=2, column=0, padx=20, pady=(10, 5), sticky="ew")
        
        # API Provider Selection
        self.api_provider_combo = ctk.CTkComboBox(
            self.sidebar_frame,
            values=["OpenRouter", "Google AI"],
            variable=self.api_provider_var,
            command=self.on_api_provider_changed,
            width=240
        )
        self.api_provider_combo.grid(row=3, column=0, padx=20, pady=5, sticky="ew")
        
        # OpenRouter API Key Entry
        self.openrouter_key_entry = ctk.CTkEntry(
            self.sidebar_frame,
            placeholder_text="OpenRouter API Key",
            textvariable=self.openrouter_key_var,
            show="*",
            width=240
        )
        self.openrouter_key_entry.grid(row=4, column=0, padx=20, pady=5, sticky="ew")
        
        # Google AI API Keys - Multiple keys support (Textbox instead of Entry)
        self.google_ai_keys_label = ctk.CTkLabel(
            self.sidebar_frame,
            text="Google AI Free Keys (1 key/d√≤ng):",
            font=ctk.CTkFont(size=11),
            text_color="gray"
        )
        self.google_ai_keys_label.grid(row=5, column=0, padx=20, pady=(5, 2), sticky="w")
        
        self.google_ai_keys_textbox = ctk.CTkTextbox(
            self.sidebar_frame,
            height=80,
            width=240,
            font=ctk.CTkFont(family="Consolas", size=10)
        )
        self.google_ai_keys_textbox.grid(row=6, column=0, padx=20, pady=(0, 5), sticky="ew")
        
        # New: Google AI Paid Key Entry
        self.google_ai_paid_key_label = ctk.CTkLabel(
            self.sidebar_frame,
            text="Google AI Paid Key (Billing Enabled):",
            font=ctk.CTkFont(size=11),
            text_color="gray"
        )
        self.google_ai_paid_key_label.grid(row=7, column=0, padx=20, pady=(5, 2), sticky="w")

        self.google_ai_paid_key_entry = ctk.CTkEntry(
            self.sidebar_frame,
            placeholder_text="Enter paid API key",
            textvariable=self.google_ai_paid_key_var,
            show="*",
            width=240
        )
        self.google_ai_paid_key_entry.grid(row=8, column=0, padx=20, pady=(0, 5), sticky="ew")

        # New: Key type selection
        self.google_key_type_segmented_btn = ctk.CTkSegmentedButton(
            self.sidebar_frame,
            values=["Free Keys", "Paid Key"],
            variable=self.google_key_usage_var,
            command=self.on_google_key_type_changed
        )
        self.google_key_type_segmented_btn.grid(row=9, column=0, padx=20, pady=5, sticky="ew")
        
        # --- Model Selection ---
        self.model_frame = ctk.CTkFrame(self.sidebar_frame, fg_color="transparent")
        self.model_frame.grid(row=10, column=0, padx=20, pady=5, sticky="ew")
        self.model_frame.grid_columnconfigure(0, weight=1)
        
        self.model_combo = ctk.CTkComboBox(
            self.model_frame,
            values=[], # Will be populated by _update_model_list
            variable=self.model_var
        )
        self.model_combo.grid(row=0, column=0, sticky="ew")

        # Button frame for + and settings buttons
        self.model_buttons_frame = ctk.CTkFrame(self.model_frame, fg_color="transparent")
        self.model_buttons_frame.grid(row=0, column=1, padx=(5, 0))
        
        self.add_model_btn = ctk.CTkButton(
            self.model_buttons_frame,
            text="‚ûï",
            command=self.open_add_model_dialog,
            width=30,
            height=28
        )
        self.add_model_btn.grid(row=0, column=0, padx=(0, 2))

        self.model_settings_btn = ctk.CTkButton(
            self.model_buttons_frame,
            text="‚öôÔ∏è",
            command=self.open_model_settings,
            width=30,
            height=28
        )
        self.model_settings_btn.grid(row=0, column=1)
        
        
        self.context_combo = ctk.CTkComboBox(
            self.sidebar_frame,
            values=[
                "B·ªëi c·∫£nh hi·ªán ƒë·∫°i",
                "B·ªëi c·∫£nh c·ªï ƒë·∫°i",
                "T√πy ch·ªânh"
            ],
            variable=self.context_var,
            command=self.on_context_changed,
            width=240
        )
        self.context_combo.grid(row=11, column=0, padx=20, pady=5, sticky="ew")
        
        # Test API button
        self.test_api_btn = ctk.CTkButton(
            self.sidebar_frame,
            text="üß™ Test API",
            command=self.test_api_connection,
            width=240,
            height=30
        )
        self.test_api_btn.grid(row=12, column=0, padx=20, pady=5, sticky="ew")
        
        # Performance Settings
        self.performance_label = ctk.CTkLabel(
            self.sidebar_frame,
            text="‚ö° Performance",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        self.performance_label.grid(row=13, column=0, padx=20, pady=(20, 5), sticky="ew")
        
        # Threads setting
        self.threads_frame = ctk.CTkFrame(self.sidebar_frame, fg_color="transparent")
        self.threads_frame.grid(row=14, column=0, padx=20, pady=5, sticky="ew")
        self.threads_frame.grid_columnconfigure(1, weight=1)
        
        self.threads_label = ctk.CTkLabel(
            self.threads_frame,
            text="Threads:",
            font=ctk.CTkFont(size=12)
        )
        self.threads_label.grid(row=0, column=0, sticky="w")
        
        self.threads_entry = ctk.CTkEntry(
            self.threads_frame,
            textvariable=self.threads_var,
            width=60,
            height=28
        )
        self.threads_entry.grid(row=0, column=1, padx=(5, 0), sticky="e")
        
        # Auto-detect button
        self.auto_threads_btn = ctk.CTkButton(
            self.threads_frame,
            text="üîß",
            command=self.auto_detect_threads,
            width=25,
            height=28,
            font=ctk.CTkFont(size=10)
        )
        self.auto_threads_btn.grid(row=0, column=2, padx=(2, 0))
        
        # Chunk size setting
        self.chunk_frame = ctk.CTkFrame(self.sidebar_frame, fg_color="transparent")
        self.chunk_frame.grid(row=15, column=0, padx=20, pady=5, sticky="ew")
        self.chunk_frame.grid_columnconfigure(1, weight=1)
        
        self.chunk_label = ctk.CTkLabel(
            self.chunk_frame,
            text="Chunk Size:",
            font=ctk.CTkFont(size=12)
        )
        self.chunk_label.grid(row=0, column=0, sticky="w")
        
        self.chunk_entry = ctk.CTkEntry(
            self.chunk_frame,
            textvariable=self.chunk_size_var,
            placeholder_text="10-2000",
            width=60,
            height=28
        )
        self.chunk_entry.grid(row=0, column=1, padx=(5, 0), sticky="e")
        
        # General Settings
        self.settings_label = ctk.CTkLabel(
            self.sidebar_frame,
            text="‚öôÔ∏è Settings",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        self.settings_label.grid(row=16, column=0, padx=20, pady=(20, 5), sticky="ew")
        
        self.auto_reformat_check = ctk.CTkCheckBox(
            self.sidebar_frame,
            text="Auto reformat",
            variable=self.auto_reformat_var
        )
        self.auto_reformat_check.grid(row=17, column=0, padx=20, pady=5, sticky="w")
        
        self.auto_epub_check = ctk.CTkCheckBox(
            self.sidebar_frame,
            text="Auto convert EPUB",
            variable=self.auto_convert_epub_var,
            command=self.on_epub_setting_changed
        )
        self.auto_epub_check.grid(row=18, column=0, padx=20, pady=5, sticky="w")
        
        # Control buttons - Grid 1x2 Layout
        self.control_grid_frame = ctk.CTkFrame(self.sidebar_frame, fg_color="transparent")
        self.control_grid_frame.grid(row=19, column=0, padx=20, pady=10, sticky="ew")
        
        # Configure grid columns v·ªõi weight ƒë·ªÅu nhau
        for i in range(2):
            self.control_grid_frame.grid_columnconfigure(i, weight=1, uniform="buttons")
        
        # Row 1: Main controls
        self.translate_btn = ctk.CTkButton(
            self.control_grid_frame,
            text="üöÄ B·∫Øt ƒê·∫ßu D·ªãch",
            command=self.toggle_translation,
            height=40,
            font=ctk.CTkFont(size=12, weight="bold")
        )
        self.translate_btn.grid(row=0, column=0, padx=(0, 5), pady=(0, 5), sticky="ew")
        
        self.save_settings_btn = ctk.CTkButton(
            self.control_grid_frame,
            text="üíæ L∆∞u C√†i ƒê·∫∑t",
            command=self.save_settings,
            height=40
        )
        self.save_settings_btn.grid(row=0, column=1, padx=(5, 0), pady=(0, 5), sticky="ew")
        
        # Row 2: Appearance toggle
        # Appearance toggle frame
        self.appearance_frame = ctk.CTkFrame(self.control_grid_frame, fg_color="transparent")
        self.appearance_frame.grid(row=1, column=0, columnspan=2, padx=0, pady=(5, 0), sticky="ew")
        self.appearance_frame.grid_columnconfigure(0, weight=1)
        self.appearance_frame.grid_columnconfigure(1, weight=1)
        
        # Light/Dark toggle buttons
        self.light_mode_btn = ctk.CTkButton(
            self.appearance_frame,
            text="‚òÄÔ∏è Light Mode",
            command=self.set_light_mode,
            height=40,
            font=ctk.CTkFont(size=12)
        )
        self.light_mode_btn.grid(row=0, column=0, padx=(0, 2), sticky="ew")
        
        self.dark_mode_btn = ctk.CTkButton(
            self.appearance_frame,
            text="üåô Dark Mode",
            command=self.set_dark_mode,
            height=40,
            font=ctk.CTkFont(size=12)
        )
        self.dark_mode_btn.grid(row=0, column=1, padx=(2, 0), sticky="ew")
        
        # Initialize appearance button colors
        self.update_appearance_buttons()
        
        # Add bottom spacer for better scrolling
        self.bottom_spacer = ctk.CTkFrame(self.sidebar_frame, height=20, fg_color="transparent")
        self.bottom_spacer.grid(row=20, column=0, padx=20, pady=20, sticky="ew")
        
    def setup_main_content(self):
        """Thi·∫øt l·∫≠p n·ªôi dung ch√≠nh"""
        self.main_frame = ctk.CTkScrollableFrame(self)
        self.main_frame.grid(row=0, column=1, sticky="nsew", padx=10)
        self.main_frame.grid_columnconfigure(0, weight=1)
        
        # Title
        self.main_title = ctk.CTkLabel(
            self.main_frame,
            text="üìÅ File Management & Processing",
            font=ctk.CTkFont(size=20, weight="bold")
        )
        self.main_title.grid(row=0, column=0, padx=20, pady=20)
        
        # File selection frame
        self.file_frame = ctk.CTkFrame(self.main_frame)
        self.file_frame.grid(row=1, column=0, sticky="ew", padx=20, pady=10)
        self.file_frame.grid_columnconfigure(1, weight=1)
        
        # Input file
        self.input_label = ctk.CTkLabel(
            self.file_frame,
            text="Input File:",
            font=ctk.CTkFont(weight="bold")
        )
        self.input_label.grid(row=0, column=0, padx=20, pady=(20, 5), sticky="w")
        
        self.input_entry = ctk.CTkEntry(
            self.file_frame,
            textvariable=self.input_file_var,
            placeholder_text="Ch·ªçn file truy·ªán c·∫ßn d·ªãch..."
        )
        self.input_entry.grid(row=1, column=0, columnspan=2, padx=20, pady=5, sticky="ew")
        
        self.input_btn = ctk.CTkButton(
            self.file_frame,
            text="üìÅ Browse",
            command=self.browse_input_file,
            width=100
        )
        self.input_btn.grid(row=2, column=0, padx=20, pady=5, sticky="w")
        
        # Output file
        self.output_label = ctk.CTkLabel(
            self.file_frame,
            text="Output File:",
            font=ctk.CTkFont(weight="bold")
        )
        self.output_label.grid(row=3, column=0, padx=20, pady=(15, 5), sticky="w")
        
        self.output_entry = ctk.CTkEntry(
            self.file_frame,
            textvariable=self.output_file_var,
            placeholder_text="File output s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông t·∫°o..."
        )
        self.output_entry.grid(row=4, column=0, columnspan=2, padx=20, pady=5, sticky="ew")
        
        self.output_btn_frame = ctk.CTkFrame(self.file_frame, fg_color="transparent")
        self.output_btn_frame.grid(row=5, column=0, columnspan=2, padx=20, pady=(5, 20), sticky="w")
        
        self.output_btn = ctk.CTkButton(
            self.output_btn_frame,
            text="üìÅ Browse",
            command=self.browse_output_file,
            width=100
        )
        self.output_btn.grid(row=0, column=0, padx=(0, 10))
        
        self.reset_output_btn = ctk.CTkButton(
            self.output_btn_frame,
            text="üîÑ Reset",
            command=self.reset_output_filename,
            width=100
        )
        self.reset_output_btn.grid(row=0, column=1)
        
        # EPUB Settings (initially hidden)
        self.epub_frame = ctk.CTkFrame(self.main_frame)
        self.epub_frame.grid_columnconfigure(0, weight=1)
        
        self.epub_title_label = ctk.CTkLabel(
            self.epub_frame,
            text="üìö EPUB Settings",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        self.epub_title_label.grid(row=0, column=0, padx=20, pady=(20, 10))
        
        self.book_title_entry = ctk.CTkEntry(
            self.epub_frame,
            textvariable=self.book_title_var,
            placeholder_text="Ti√™u ƒë·ªÅ s√°ch"
        )
        self.book_title_entry.grid(row=1, column=0, padx=20, pady=5, sticky="ew")
        
        self.book_author_entry = ctk.CTkEntry(
            self.epub_frame,
            textvariable=self.book_author_var,
            placeholder_text="T√°c gi·∫£"
        )
        self.book_author_entry.grid(row=2, column=0, padx=20, pady=5, sticky="ew")
        
        # Chapter header pattern selection
        self.chapter_pattern_label = ctk.CTkLabel(
            self.epub_frame,
            text="ƒê·ªãnh d·∫°ng ti√™u ƒë·ªÅ ch∆∞∆°ng:",
            font=ctk.CTkFont(weight="bold")
        )
        self.chapter_pattern_label.grid(row=3, column=0, padx=20, pady=(10, 5), sticky="w")
        
        self.chapter_pattern_combo = ctk.CTkComboBox(
            self.epub_frame,
            values=[
                "Ch∆∞∆°ng XX:",
                "Ch∆∞∆°ng XX",
                "XXX",
                "XXX:",
                "Ph·∫ßn X:",
                "Ph·∫ßn X",
                "Chapter X:",
                "Chapter X",
                "Á¨¨XÁ´†",
                "Á¨¨XÁ´†:",
                "T√πy ch·ªânh"
            ],
            variable=self.chapter_pattern_var,
            command=self.on_chapter_pattern_changed,
            width=240
        )
        self.chapter_pattern_combo.grid(row=4, column=0, padx=20, pady=5, sticky="ew")
        
        # Custom pattern entry (hidden by default)
        self.custom_pattern_frame = ctk.CTkFrame(self.epub_frame, fg_color="transparent")
        self.custom_pattern_frame.grid_columnconfigure(0, weight=1)
        
        self.custom_pattern_label = ctk.CTkLabel(
            self.custom_pattern_frame,
            text="Regex pattern t√πy ch·ªânh:",
            font=ctk.CTkFont(size=12)
        )
        self.custom_pattern_label.grid(row=0, column=0, padx=20, pady=(5, 2), sticky="w")
        
        self.custom_pattern_entry = ctk.CTkEntry(
            self.custom_pattern_frame,
            textvariable=self.custom_chapter_pattern_var,
            placeholder_text="Nh·∫≠p regex pattern..."
        )
        self.custom_pattern_entry.grid(row=1, column=0, padx=20, pady=(2, 10), sticky="ew")

        # Progress frame
        self.progress_frame = ctk.CTkFrame(self.main_frame)
        self.progress_frame.grid(row=3, column=0, sticky="ew", padx=20, pady=10)
        self.progress_frame.grid_columnconfigure(0, weight=1)
        
        self.progress_label = ctk.CTkLabel(
            self.progress_frame,
            text="üìä Progress",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        self.progress_label.grid(row=0, column=0, padx=20, pady=(20, 5))
        
        self.progress_text = ctk.CTkLabel(
            self.progress_frame,
            text="S·∫µn s√†ng ƒë·ªÉ b·∫Øt ƒë·∫ßu...",
            font=ctk.CTkFont(size=12)
        )
        self.progress_text.grid(row=1, column=0, padx=20, pady=5)
        
        self.progress_bar = ctk.CTkProgressBar(self.progress_frame)
        self.progress_bar.grid(row=2, column=0, padx=20, pady=(5, 20), sticky="ew")
        self.progress_bar.set(0)
        
        # Custom prompt frame (hidden by default)
        self.custom_prompt_frame = ctk.CTkFrame(self.main_frame)
        self.custom_prompt_frame.grid_columnconfigure(0, weight=1)
        
        self.custom_prompt_label = ctk.CTkLabel(
            self.custom_prompt_frame,
            text="Custom Prompt:",
            font=ctk.CTkFont(weight="bold")
        )
        self.custom_prompt_label.grid(row=0, column=0, padx=20, pady=(20, 5), sticky="w")
        
        self.custom_prompt_textbox = ctk.CTkTextbox(
            self.custom_prompt_frame,
            height=100
        )
        self.custom_prompt_textbox.grid(row=1, column=0, padx=20, pady=(5, 20), sticky="ew")
        
    def setup_right_panel(self):
        """Thi·∫øt l·∫≠p panel logs b√™n ph·∫£i"""
        self.right_panel = ctk.CTkFrame(self, width=350)
        self.right_panel.grid(row=0, column=2, sticky="nsew", padx=(10, 0))
        self.right_panel.grid_rowconfigure(2, weight=1)
        self.right_panel.grid_columnconfigure(0, weight=1)
        
        # Logs title
        self.logs_title = ctk.CTkLabel(
            self.right_panel,
            text="üìù Logs & Information",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        self.logs_title.grid(row=0, column=0, padx=20, pady=(20, 10))
        
        # Log controls
        self.log_controls_frame = ctk.CTkFrame(self.right_panel, fg_color="transparent")
        self.log_controls_frame.grid(row=1, column=0, sticky="ew", padx=20, pady=5)
        
        self.clear_log_btn = ctk.CTkButton(
            self.log_controls_frame,
            text="üóëÔ∏è Clear",
            command=self.clear_logs,
            width=80,
            height=30
        )
        self.clear_log_btn.grid(row=0, column=0, padx=(0, 5))
        
        self.save_log_btn = ctk.CTkButton(
            self.log_controls_frame,
            text="üíæ Save",
            command=self.save_logs,
            width=80,
            height=30
        )
        self.save_log_btn.grid(row=0, column=1, padx=5)
        
        self.auto_scroll_var = ctk.BooleanVar(value=True)
        self.auto_scroll_check = ctk.CTkCheckBox(
            self.log_controls_frame,
            text="Auto-scroll",
            variable=self.auto_scroll_var
        )
        self.auto_scroll_check.grid(row=0, column=2, padx=(5, 0))
        
        # Log text area
        self.log_textbox = ctk.CTkTextbox(
            self.right_panel,
            font=ctk.CTkFont(family="Consolas", size=10)
        )
        self.log_textbox.grid(row=2, column=0, padx=20, pady=(5, 20), sticky="nsew")
        
    def on_api_provider_changed(self, choice):
        """X·ª≠ l√Ω khi thay ƒë·ªïi API provider"""
        if choice == "OpenRouter":
            # Show OpenRouter key, hide Google AI keys
            self.openrouter_key_entry.grid()
            self.google_ai_keys_label.grid_remove()
            self.google_ai_keys_textbox.grid_remove()
            self.google_ai_paid_key_label.grid_remove()
            self.google_ai_paid_key_entry.grid_remove()
            self.google_key_type_segmented_btn.grid_remove()
            
            self.log("üîÑ Chuy·ªÉn sang OpenRouter API")
            
        elif choice == "Google AI":
            # Hide OpenRouter key, show Google AI keys
            self.openrouter_key_entry.grid_remove()
            self.google_key_type_segmented_btn.grid()
            self.on_google_key_type_changed() # Show correct entry based on selector's current value
            
            self.log("üîÑ Chuy·ªÉn sang Google AI API")
            
            # Hi·ªÉn th·ªã c·∫£nh b√°o v·ªÅ rate limits v√† m·∫πo d√πng nhi·ªÅu keys
            self.log("‚ö†Ô∏è Google AI Free Tier c√≥ gi·ªõi h·∫°n RPM (Requests Per Minute) th·∫•p.")
            self.log("   - C√°c model Pro th∆∞·ªùng c√≥ RPM r·∫•t th·∫•p (v√≠ d·ª•: 2 RPM).")
            self.log("   - C√°c model Flash th∆∞·ªùng c√≥ RPM cao h∆°n (v√≠ d·ª•: 10-15 RPM).")
            self.log("üí° TIP: Nh·∫≠p NHI·ªÄU keys (1 key/d√≤ng) ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô!")
            self.log("   ‚Ä¢ H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông xoay v√≤ng gi·ªØa c√°c keys.")
            self.log("   ‚Ä¢ M·ªói key c√≥ rate limit ri√™ng ‚Üí t·ªïng RPM tƒÉng l√™n.")
            self.log("   ‚Ä¢ Lu√¥n ki·ªÉm tra gi·ªõi h·∫°n RPM m·ªõi nh·∫•t t·∫°i trang ch·ªß Google AI.")
            self.log("   ‚Ä¢ Tham kh·∫£o: https://ai.google.dev/gemini-api/docs/rate-limits")
    
        # Update model list for the new provider
        self._update_model_list()

    def _update_model_list(self):
        """C·∫≠p nh·∫≠t danh s√°ch model trong combobox d·ª±a tr√™n provider v√† c√°c model ƒë√£ l∆∞u."""
        provider = self.api_provider_var.get()
        
        if provider == "OpenRouter":
            base_models = [
                "anthropic/claude-3.5-sonnet",
                "openai/gpt-4o-mini",
                "google/gemini-2.0-flash-001",
                "google/gemini-1.5-pro"
            ]
        elif provider == "Google AI":
            base_models = [
                "gemini-2.5-pro",
                "gemini-2.5-flash",
                "gemini-2.5-flash-lite",
                "gemini-2.0-flash",
                "gemini-2.0-flash-lite",
                "gemini-1.5-pro",
                "gemini-1.5-flash"
            ]
        else:
            base_models = []

        # Combine base models with saved custom models
        combined_models = base_models + sorted(self.saved_custom_models)
        
        self.model_combo.configure(values=combined_models)
        
        # Check if the current model is still valid, if not, set a default
        current_model = self.model_var.get()
        if current_model not in combined_models:
            self.model_var.set(base_models[0] if base_models else "anthropic/claude-3.5-sonnet")
    
    
    def on_google_key_type_changed(self, choice=None):
        """X·ª≠ l√Ω khi thay ƒë·ªïi lo·∫°i key Google AI (Free/Paid)"""
        if choice is None:
            choice = self.google_key_usage_var.get()
        
        if choice == "Free Keys":
            self.google_ai_keys_label.grid()
            self.google_ai_keys_textbox.grid()
            self.google_ai_paid_key_label.grid_remove()
            self.google_ai_paid_key_entry.grid_remove()
            self.log("üîë Chuy·ªÉn sang d√πng c√°c API keys mi·ªÖn ph√≠.")
        elif choice == "Paid Key":
            self.google_ai_keys_label.grid_remove()
            self.google_ai_keys_textbox.grid_remove()
            self.google_ai_paid_key_label.grid()
            self.google_ai_paid_key_entry.grid()
            self.log("üí≥ Chuy·ªÉn sang d√πng API key tr·∫£ ph√≠.")
    
    def on_context_changed(self, choice):
        """X·ª≠ l√Ω khi thay ƒë·ªïi b·ªëi c·∫£nh d·ªãch"""
        if choice == "T√πy ch·ªânh":
            self.custom_prompt_frame.grid(row=4, column=0, sticky="ew", padx=20, pady=10)
            # Load default custom prompt
            default_custom = """NHI·ªÜM V·ª§: D·ªãch vƒÉn b·∫£n sang ti·∫øng Vi·ªát hi·ªán ƒë·∫°i, t·ª± nhi√™n.

QUY T·∫ÆC QUAN TR·ªåNG:
1. VƒÇN PHONG: D·ªãch nh∆∞ ng∆∞·ªùi Vi·ªát n√≥i chuy·ªán h√†ng ng√†y, tr√°nh t·ª´ H√°n Vi·ªát c·ª©ng nh·∫Øc
2. NG∆Ø·ªúI K·ªÇ CHUY·ªÜN: Lu√¥n x∆∞ng "t√¥i" (hi·ªán ƒë·∫°i) ho·∫∑c "ta" (c·ªï ƒë·∫°i). TUY·ªÜT ƒê·ªêI KH√îNG d√πng "ba/b·ªë/anh/ch·ªã/em/con"
3. L·ªúI THO·∫†I: ƒê·∫∑t trong d·∫•u ngo·∫∑c k√©p "...", x∆∞ng h√¥ t·ª± nhi√™n theo quan h·ªá nh√¢n v·∫≠t
4. T·ª™NG NG·ªÆ HI·ªÜN ƒê·∫†I: "C·∫£m th·∫•y" thay v√¨ "c·∫£m nh·∫≠n", "Anh ·∫•y/C√¥ ·∫•y" thay v√¨ "H·∫Øn/N√†ng"

‚ö†Ô∏è QUAN TR·ªåNG: CH·ªà TR·∫¢ V·ªÄ B·∫¢N D·ªäCH, KH√îNG GI·∫¢I TH√çCH G√å TH√äM!

VƒÉn b·∫£n c·∫ßn d·ªãch:"""
            self.custom_prompt_textbox.delete("0.0", "end")
            self.custom_prompt_textbox.insert("0.0", default_custom)
        else:
            self.custom_prompt_frame.grid_remove()
    
    def get_system_instruction(self):
        """T·∫°o system instruction d·ª±a tr√™n b·ªëi c·∫£nh ƒë√£ ch·ªçn"""
        context = self.context_var.get()
        
        base_instruction = """NHI·ªÜM V·ª§: D·ªãch vƒÉn b·∫£n sang ti·∫øng Vi·ªát hi·ªán ƒë·∫°i, t·ª± nhi√™n.

QUY T·∫ÆC QUAN TR·ªåNG:
1. VƒÇN PHONG: D·ªãch nh∆∞ ng∆∞·ªùi Vi·ªát n√≥i chuy·ªán h√†ng ng√†y, tr√°nh t·ª´ H√°n Vi·ªát c·ª©ng nh·∫Øc
2. NG∆Ø·ªúI K·ªÇ CHUY·ªÜN: Lu√¥n x∆∞ng "t√¥i" (hi·ªán ƒë·∫°i) ho·∫∑c "ta" (c·ªï ƒë·∫°i). TUY·ªÜT ƒê·ªêI KH√îNG d√πng "ba/b·ªë/anh/ch·ªã/em/con"
3. L·ªúI THO·∫†I: ƒê·∫∑t trong d·∫•u ngo·∫∑c k√©p "...", x∆∞ng h√¥ t·ª± nhi√™n theo quan h·ªá nh√¢n v·∫≠t
4. T·ª™NG NG·ªÆ HI·ªÜN ƒê·∫†I: "C·∫£m th·∫•y" thay v√¨ "c·∫£m nh·∫≠n", "Anh ·∫•y/C√¥ ·∫•y" thay v√¨ "H·∫Øn/N√†ng"

‚ö†Ô∏è QUAN TR·ªåNG: CH·ªà TR·∫¢ V·ªÄ B·∫¢N D·ªäCH, KH√îNG GI·∫¢I TH√çCH G√å TH√äM!

VƒÉn b·∫£n c·∫ßn d·ªãch:"""
        
        context_instructions = {
            "B·ªëi c·∫£nh hi·ªán ƒë·∫°i": f"""{base_instruction}

B·ªî SUNG CHO HI·ªÜN ƒê·∫†I:
- X∆∞ng h√¥ l·ªùi tho·∫°i: "m√¨nh/b·∫°n", "tao/m√†y", "anh/ch·ªã/em" t√πy quan h·ªá
- Tr√°nh t·ª´ c≈©: "H·∫Øn"‚Üí"Anh ·∫•y", "N√†ng"‚Üí"C√¥ ·∫•y", "Th√¢n th·ªÉ"‚Üí"C∆° th·ªÉ"  
- Gi·ªØ t·ª´ l√≥ng, slang n·∫øu c√≥ trong g·ªëc

CH·ªà TR·∫¢ V·ªÄ B·∫¢N D·ªäCH!""",

            "B·ªëi c·∫£nh c·ªï ƒë·∫°i": f"""{base_instruction}

# B·ªêI C·∫¢NH ƒê·∫∂C BI·ªÜT - C·ªî ƒê·∫†I:

5. VƒÉn phong c·ªï ƒëi·ªÉn:
*   S·ª≠ d·ª•ng ng√¥n ng·ªØ trang tr·ªçng, l·ªãch thi·ªáp ph√π h·ª£p th·ªùi k·ª≥ c·ªï ƒë·∫°i
*   Ng∆∞·ªùi k·ªÉ chuy·ªán lu√¥n x∆∞ng "ta" (KH√îNG d√πng th·∫ßn, h·∫° th·∫ßn, ti·ªÉu nh√¢n...)
*   L·ªùi tho·∫°i nh√¢n v·∫≠t: ta/ng∆∞∆°i, h·∫° th·∫ßn/th·∫ßn t·ª≠, c√¥ng t·ª≠/ti·ªÉu th∆∞, s∆∞ ph·ª•/ƒë·ªì ƒë·ªá
*   Thu·∫≠t ng·ªØ v√µ thu·∫≠t: c√¥ng ph√°p, t√¢m ph√°p, tu vi, c·∫£nh gi·ªõi, ƒëan d∆∞·ª£c
*   Ch·ª©c v·ªã c·ªï ƒë·∫°i: ho√†ng th∆∞·ª£ng, ho√†ng h·∫≠u, th√°i t·ª≠, ƒë·∫°i th·∫ßn, t∆∞·ªõng qu√¢n

6. ƒê·∫∑c ƒëi·ªÉm ri√™ng:
*   L·ªùi tho·∫°i trang nghi√™m, c√≥ ph√©p t·∫Øc
*   S·ª≠ d·ª•ng t·ª´ H√°n Vi·ªát khi ph√π h·ª£p
*   Gi·ªØ nguy√™n t√™n v√µ c√¥ng, t√¢m ph√°p, ƒë·ªãa danh c·ªï ƒë·∫°i
*   Th·ªÉ hi·ªán ƒë√∫ng th·ª© b·∫≠c, l·ªÖ nghƒ©a trong x√£ h·ªôi phong ki·∫øn""",

            "T√πy ch·ªânh": self.custom_prompt_textbox.get("0.0", "end").strip() if hasattr(self, 'custom_prompt_textbox') else base_instruction
        }
        
        return context_instructions.get(context, base_instruction)
    
    def browse_input_file(self):
        """Ch·ªçn file input"""
        file_path = filedialog.askopenfilename(
            title="Ch·ªçn file truy·ªán c·∫ßn d·ªãch",
            filetypes=[
                ("Text files", "*.txt"),
                ("All files", "*.*")
            ]
        )
        if file_path:
            self.input_file_var.set(file_path)
            
            # Auto-generate output filename
            output_path = generate_output_filename(file_path)
            self.output_file_var.set(output_path)
            self.log(f"üìÅ T·ª± ƒë·ªông t·∫°o t√™n file output: {os.path.basename(output_path)}")
            
            # Auto-fill book title from filename
            if not self.book_title_var.get() or self.book_title_var.get() == "Unknown Title":
                filename = os.path.splitext(os.path.basename(file_path))[0]
                self.book_title_var.set(filename)
            
            # Check if there's existing progress
            progress_file = f"{file_path}.progress.json"
            if os.path.exists(progress_file):
                try:
                    with open(progress_file, 'r', encoding='utf-8') as f:
                        progress_data = json.load(f)
                        completed_chunks = progress_data.get('completed_chunks', 0)
                        if completed_chunks > 0:
                            self.log(f"üîÑ Ph√°t hi·ªán ti·∫øn ƒë·ªô c≈©: {completed_chunks} chunks ƒë√£ ho√†n th√†nh")
                            self.translate_btn.configure(
                                text="‚ñ∂Ô∏è Ti·∫øp T·ª•c D·ªãch",
                                fg_color=("blue", "darkblue"),
                                hover_color=("darkblue", "blue")
                            )
                            self.progress_text.configure(text=f"S·∫µn s√†ng ti·∫øp t·ª•c ({completed_chunks} chunks ƒë√£ xong)")
                except Exception as e:
                    self.log(f"‚ö†Ô∏è L·ªói ƒë·ªçc file ti·∫øn ƒë·ªô: {e}")
            else:
                self.translate_btn.configure(
                    text="üöÄ B·∫Øt ƒê·∫ßu D·ªãch",
                    fg_color=("blue", "darkblue"),
                    hover_color=("darkblue", "blue")
                )
                self.progress_text.configure(text="S·∫µn s√†ng ƒë·ªÉ b·∫Øt ƒë·∫ßu...")
                self.progress_bar.set(0)  # Reset progress bar
    
    def browse_output_file(self):
        """Ch·ªçn file output"""
        initial_dir = ""
        if self.input_file_var.get():
            initial_dir = os.path.dirname(self.input_file_var.get())
            
        file_path = filedialog.asksaveasfilename(
            title="Ch·ªçn n∆°i l∆∞u file ƒë√£ d·ªãch",
            initialdir=initial_dir,
            defaultextension=".txt",
            filetypes=[
                ("Text files", "*.txt"),
                ("All files", "*.*")
            ]
        )
        if file_path:
            self.output_file_var.set(file_path)
            self.log(f"üìÅ ƒê√£ ch·ªçn file output: {os.path.basename(file_path)}")
    
    def reset_output_filename(self):
        """Reset output filename to auto-generated name"""
        if not self.input_file_var.get():
            show_warning("Vui l√≤ng ch·ªçn file input tr∆∞·ªõc!", parent=self)
            return
            
        output_path = generate_output_filename(self.input_file_var.get())
        self.output_file_var.set(output_path)
        self.log(f"üîÑ ƒê√£ reset t√™n file output: {os.path.basename(output_path)}")
    
    def auto_detect_threads(self, silent=False):
        """T·ª± ƒë·ªông ph√°t hi·ªán s·ªë threads t·ªëi ∆∞u cho m√°y v√† provider"""
        try:
            # Import h√†m get_optimal_threads t·ª´ translate module
            try:
                from ..core.translate import get_optimal_threads
            except ImportError:
                from core.translate import get_optimal_threads
            
            # L·∫•y th√¥ng tin provider v√† API keys
            provider = self.get_current_provider()
            model_name = self.model_var.get()
            api_key = self.get_current_api_key()
            
            # T√≠nh s·ªë l∆∞·ª£ng API keys
            if provider == "Google AI" and isinstance(api_key, list):
                num_api_keys = len(api_key)
            else:
                num_api_keys = 1
            
            # T√≠nh to√°n threads t·ªëi ∆∞u d·ª±a tr√™n provider v√† s·ªë keys
            optimal_threads = get_optimal_threads(num_api_keys=num_api_keys, provider=provider)
            
            self.threads_var.set(str(optimal_threads))
            
            if not silent:
                if num_api_keys > 1:
                    message = f"ƒê√£ ƒë·∫∑t threads t·ªëi ∆∞u: {optimal_threads}\n(Provider: {provider}, {num_api_keys} API keys)"
                    message += f"\n\nüí° TIP: V·ªõi {num_api_keys} keys, h·ªá th·ªëng c√≥ th·ªÉ ch·∫°y {optimal_threads} threads ƒë·ªìng th·ªùi ƒë·ªÉ t·ªëi ∆∞u t·ªëc ƒë·ªô!"
                else:
                    message = f"ƒê√£ ƒë·∫∑t threads t·ªëi ∆∞u: {optimal_threads}\n(Provider: {provider}, Model: {model_name})"
                
                show_success(message, parent=self)
                
        except Exception as e:
            if not silent:
                self.log(f"‚ö†Ô∏è L·ªói khi ph√°t hi·ªán CPU: {e}")
                show_warning(f"Kh√¥ng th·ªÉ t·ª± ƒë·ªông ph√°t hi·ªán CPU.\nƒê·∫∑t v·ªÅ m·∫∑c ƒë·ªãnh: 10 threads", parent=self)
            self.threads_var.set("10")
    
    def setup_log_capture(self):
        """Thi·∫øt l·∫≠p log capture"""
        if not self.log_capture:
            self.log_capture = LogCapture(self.log_from_translate)
            sys.stdout = self.log_capture
    
    def restore_stdout(self):
        """Kh√¥i ph·ª•c stdout"""
        if self.log_capture:
            sys.stdout = self.original_stdout
            self.log_capture = None
    
    def log_from_translate(self, message):
        """Nh·∫≠n log t·ª´ translate.py v√† hi·ªÉn th·ªã l√™n GUI"""
        self.after(0, lambda: self._update_log_ui(message))
    
    def _update_log_ui(self, message):
        """Update log UI (thread-safe)"""
        try:
            timestamp = datetime.now().strftime("%H:%M:%S")
            
            # Detect adaptive scaling messages v√† th√™m formatting ƒë·∫∑c bi·ªát
            if "SCALE DOWN" in message or "SCALE UP" in message:
                log_message = f"[{timestamp}] üéØ {message}"
            elif "Thread Manager Stats" in message:
                log_message = f"[{timestamp}] üìä {message}"
            elif "Kh·ªüi ƒë·ªông thread pool" in message:
                log_message = f"[{timestamp}] üîß {message}"
            elif "Adaptive scaling" in message:
                log_message = f"[{timestamp}] üîÑ {message}"
            else:
                log_message = f"[{timestamp}] {message}"
            
            # Update log textbox
            if hasattr(self, 'log_textbox') and self.log_textbox is not None:
                self.log_textbox.insert("end", log_message + "\n")
            
            # Auto-scroll if enabled
            if hasattr(self, 'auto_scroll_var') and self.auto_scroll_var.get():
                if hasattr(self, 'log_textbox') and self.log_textbox is not None:
                    self.log_textbox.see("end")
            
            # Update progress if it's a progress message
            self._update_progress_from_log(message)
            
            if hasattr(self, 'update_idletasks'):
                self.update_idletasks()
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói update log UI: {e}")
    
    def _update_progress_from_log(self, message):
        """C·∫≠p nh·∫≠t progress bar t·ª´ log messages"""
        try:
            import re
            
            # Pattern: "Ho√†n th√†nh chunk X/Y"
            match1 = re.search(r'Ho√†n th√†nh chunk (\d+)/(\d+)', message)
            if match1:
                current = int(match1.group(1))
                total = int(match1.group(2))
                progress_percent = (current / total)
                self.progress_bar.set(progress_percent)
                self.progress_text.configure(text=f"Ho√†n th√†nh chunk {current}/{total} ({progress_percent*100:.1f}%)")
                return
            
            # Pattern: "Ti·∫øn ƒë·ªô: X/Y chunks"
            match2 = re.search(r'Ti·∫øn ƒë·ªô: (\d+)/(\d+) chunks \((\d+\.?\d*)%\)', message)
            if match2:
                current = int(match2.group(1))
                total = int(match2.group(2))
                percent = float(match2.group(3))
                self.progress_bar.set(percent / 100)
                self.progress_text.configure(text=f"Ti·∫øn ƒë·ªô: {current}/{total} chunks ({percent:.1f}%)")
                return
                
        except Exception:
            pass
    
    def log(self, message):
        """Ghi log v√†o text area"""
        try:
            timestamp = datetime.now().strftime("%H:%M:%S")
            log_message = f"[{timestamp}] {message}"
            
            if hasattr(self, 'log_textbox') and self.log_textbox is not None:
                self.log_textbox.insert("end", log_message + "\n")
            
            if hasattr(self, 'auto_scroll_var') and self.auto_scroll_var.get():
                if hasattr(self, 'log_textbox') and self.log_textbox is not None:
                    self.log_textbox.see("end")
                
            if hasattr(self, 'update_idletasks'):
                self.update_idletasks()
            
            # Safe console printing - remove emojis for console
            try:
                console_message = message.encode('ascii', 'ignore').decode('ascii')
                print(console_message)
            except:
                pass  # Skip console printing if encoding fails
        except Exception as e:
            try:
                error_msg = f"Loi log GUI: {str(e)}"
                print(error_msg.encode('ascii', 'ignore').decode('ascii'))
            except:
                pass
    
    def clear_logs(self):
        """X√≥a logs"""
        try:
            if hasattr(self, 'log_textbox') and self.log_textbox is not None:
                self.log_textbox.delete("0.0", "end")
            print("üóëÔ∏è ƒê√£ x√≥a logs")
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói x√≥a logs: {e}")
    
    def save_logs(self):
        """L∆∞u logs ra file"""
        file_path = filedialog.asksaveasfilename(
            title="L∆∞u logs",
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )
        if file_path:
            try:
                content = self.log_textbox.get("0.0", "end")
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(content)
                self.log(f"üíæ ƒê√£ l∆∞u logs v√†o: {file_path}")
            except Exception as e:
                self.log(f"‚ùå L·ªói l∆∞u logs: {e}")
    
    def toggle_translation(self):
        """Toggle gi·ªØa b·∫Øt ƒë·∫ßu d·ªãch v√† d·ª´ng d·ªãch"""
        if self.is_translating:
            # ƒêang d·ªãch -> D·ª´ng
            set_stop_translation()
            self.log("üõë ƒê√£ y√™u c·∫ßu d·ª´ng d·ªãch...")
            self.translate_btn.configure(text="‚è≥ ƒêang d·ª´ng...", state="disabled")
        else:
            # Ch∆∞a d·ªãch ho·∫∑c ƒë√£ d·ª´ng -> B·∫Øt ƒë·∫ßu/Ti·∫øp t·ª•c d·ªãch
            self.start_translation()
    
    def continue_translation(self):
        """Ti·∫øp t·ª•c d·ªãch t·ª´ n∆°i ƒë√£ d·ª´ng"""
        # Ki·ªÉm tra xem c√≥ file input kh√¥ng
        if not self.input_file_var.get().strip():
            show_error("Vui l√≤ng ch·ªçn file input tr∆∞·ªõc!", parent=self)
            return
        
        # Ki·ªÉm tra API key d·ª±a tr√™n provider hi·ªán t·∫°i
        api_key = self.get_current_api_key()
        provider = self.get_current_provider()
        
        if provider == "Google AI":
            if not api_key or (isinstance(api_key, list) and len(api_key) == 0):
                show_error(f"Vui l√≤ng nh·∫≠p √≠t nh·∫•t 1 Google AI API Key", parent=self)
                return
        else:
            if not api_key or not api_key.strip():
                show_error(f"Vui l√≤ng nh·∫≠p {provider} API Key", parent=self)
                return
        
        self.log("‚ñ∂Ô∏è Ti·∫øp t·ª•c d·ªãch t·ª´ n∆°i ƒë√£ d·ª´ng...")
        self.start_translation()
    
    def start_translation(self):
        """B·∫Øt ƒë·∫ßu qu√° tr√¨nh d·ªãch"""
        if not TRANSLATE_AVAILABLE:
            show_error("Kh√¥ng th·ªÉ import module d·ªãch. Vui l√≤ng ki·ªÉm tra l·∫°i file translate.py", parent=self)
            return
            
        # Validate inputs - get current API key(s) based on provider
        api_key = self.get_current_api_key()
        provider = self.get_current_provider()
        
        # Validate API key
        if provider == "Google AI":
            # For Google AI, api_key should be a list
            if not api_key or (isinstance(api_key, list) and len(api_key) == 0):
                show_error(f"Vui l√≤ng nh·∫≠p √≠t nh·∫•t 1 Google AI API Key", parent=self)
                return
        else:
            # For OpenRouter, api_key should be a string
            if not api_key or not api_key.strip():
                show_error(f"Vui l√≤ng nh·∫≠p {provider} API Key", parent=self)
                return
            
        if not self.input_file_var.get().strip():
            show_error("Vui l√≤ng ch·ªçn file input", parent=self)
            return
            
        if not os.path.exists(self.input_file_var.get()):
            show_error("File input kh√¥ng t·ªìn t·∫°i", parent=self)
            return
        
        output_file = self.output_file_var.get().strip()
        if not output_file:
            output_file = generate_output_filename(self.input_file_var.get())
            self.output_file_var.set(output_file)
            self.log(f"üìù T·ª± ƒë·ªông t·∫°o t√™n file output: {os.path.basename(output_file)}")
        
        # Check if input and output are the same
        if os.path.abspath(self.input_file_var.get()) == os.path.abspath(output_file):
            show_error("File input v√† output kh√¥ng th·ªÉ gi·ªëng nhau!", parent=self)
            return
        
        # Warn if output file exists (only for new translation, not continue)
        if not is_translation_stopped() and os.path.exists(output_file):
            progress_file = f"{self.input_file_var.get()}.progress.json"
            if not os.path.exists(progress_file):  # Only warn if not continuing
                result = show_question(
                    f"File output ƒë√£ t·ªìn t·∫°i:\n{os.path.basename(output_file)}\n\nB·∫°n c√≥ mu·ªën ghi ƒë√® kh√¥ng?",
                    parent=self
                )
                if not result:
                    return
        
        # Start translation
        self.is_translating = True
        self.translate_btn.configure(
            state="normal", 
            text="üõë D·ª´ng D·ªãch",
            fg_color=("red", "darkred"),
            hover_color=("darkred", "red")
        )
        self.progress_bar.set(0)
        self.progress_text.configure(text="ƒêang d·ªãch...")
        
        # Setup log capture
        self.setup_log_capture()
        
        # Validate performance settings
        try:
            num_threads = int(self.threads_var.get())
            if num_threads < 1 or num_threads > 50:
                show_warning("S·ªë threads ph·∫£i t·ª´ 1 ƒë·∫øn 50!", parent=self)
                return
        except ValueError:
            show_warning("S·ªë threads ph·∫£i l√† s·ªë nguy√™n!", parent=self)
            return
            
        try:
            chunk_size = int(self.chunk_size_var.get())
            if chunk_size < 10 or chunk_size > 2000:
                show_warning("Chunk size ph·∫£i t·ª´ 10 ƒë·∫øn 2000!", parent=self)
                return
        except ValueError:
            show_warning("Chunk size ph·∫£i l√† s·ªë nguy√™n!", parent=self)
            return
        
        # Get current model (handle custom model)
        current_model = self.get_current_model()
        provider = self.get_current_provider()
        is_paid_key = (provider == "Google AI" and self.google_key_usage_var.get() == "Paid Key")
        
        self.log("üöÄ B·∫Øt ƒë·∫ßu qu√° tr√¨nh d·ªãch...")
        self.log(f"üìÅ Input: {os.path.basename(self.input_file_var.get())}")
        self.log(f"üìÅ Output: {os.path.basename(output_file)}")
        self.log(f"üîë Provider: {provider}")
        
        # Log s·ªë l∆∞·ª£ng keys cho Google AI v·ªõi recommendations
        if provider == "Google AI" and isinstance(api_key, list):
            num_keys = len(api_key)
            self.log(f"üîë S·ªë l∆∞·ª£ng API keys: {num_keys} keys")
            
            base_rpm = 10  # Default RPM per key
            if "pro" in current_model.lower():
                base_rpm = 2
            
            total_rpm = num_keys * base_rpm
            self.log(f"üí° T·ªïng RPM ∆∞·ªõc t√≠nh: ~{total_rpm} RPM (m·ªói key ~{base_rpm} RPM)")
            
            # NEW: Recommendation cho > 5 keys
            if num_keys > 5:
                recommended_threads_min = num_keys * 2
                recommended_threads_max = num_keys * 3
                
                self.log(f"‚ú® V·ªõi {num_keys} keys, khuy·∫øn ngh·ªã:")
                self.log(f"   üìå Threads: {recommended_threads_min}-{recommended_threads_max} (hi·ªán t·∫°i: {num_threads})")
                
                if num_threads < recommended_threads_min:
                    self.log(f"   ‚ö†Ô∏è Threads hi·ªán t·∫°i th·∫•p, c√≥ th·ªÉ tƒÉng l√™n ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô!")
                elif num_threads > recommended_threads_max:
                    self.log(f"   ‚ö†Ô∏è Threads hi·ªán t·∫°i cao, c√≥ th·ªÉ g·∫∑p rate limit!")
                else:
                    self.log(f"   ‚úÖ Threads trong kho·∫£ng t·ªëi ∆∞u!")
        
        self.log(f"ü§ñ Model: {current_model}")
        self.log(f"‚ö° Threads: {num_threads}")
        self.log(f"üì¶ Chunk size: {chunk_size} d√≤ng")
        
        # Run in thread
        self.translation_thread = threading.Thread(
            target=self.run_translation,
            args=(self.input_file_var.get(), output_file, api_key, current_model, self.get_system_instruction(), num_threads, chunk_size, provider, is_paid_key),
            daemon=True
        )
        self.translation_thread.start()
        
        # Start monitoring translation status
        self.check_translation_status()
    
    def check_translation_status(self):
        """Ki·ªÉm tra tr·∫°ng th√°i d·ªãch ƒë·ªãnh k·ª≥"""
        if self.is_translating:
            # Ki·ªÉm tra n·∫øu translation thread c√≤n s·ªëng kh√¥ng
            if hasattr(self, 'translation_thread') and self.translation_thread:
                if not self.translation_thread.is_alive():
                    # Translation thread ƒë√£ k·∫øt th√∫c - c√≥ th·ªÉ th√†nh c√¥ng ho·∫∑c th·∫•t b·∫°i
                    self.log("üîÑ Translation thread ƒë√£ k·∫øt th√∫c")
                    return  # Kh√¥ng schedule check ti·∫øp, ƒë·ªÉ translation_finished() x·ª≠ l√Ω
            
            if is_translation_stopped():
                # Translation has been stopped
                if is_quota_exceeded():
                    self.log("üí≥ API ƒë√£ h·∫øt quota!")
                    self.is_translating = False
                    self.translate_btn.configure(
                        state="normal", 
                        text="üîÑ C·∫ßn API Key M·ªõi",
                        fg_color=("orange", "darkorange"),
                        hover_color=("darkorange", "orange")
                    )
                    self.progress_text.configure(text="API h·∫øt quota - c·∫ßn API key m·ªõi")
                    self.restore_stdout()
                    
                    # Show quota exceeded dialog
                    self.show_quota_exceeded_dialog()
                    return
                else:
                    self.log("üõë D·ªãch ƒë√£ b·ªã d·ª´ng")
                    self.is_translating = False
                    self.translate_btn.configure(
                        state="normal", 
                        text="‚ñ∂Ô∏è Ti·∫øp T·ª•c D·ªãch",
                        fg_color=("blue", "darkblue"),
                        hover_color=("darkblue", "blue")
                    )
                    self.progress_text.configure(text="ƒê√£ d·ª´ng - c√≥ th·ªÉ ti·∫øp t·ª•c")
                    self.restore_stdout()
                    return
            else:
                # Check again after 1 second only if still translating
                if self.is_translating:
                    self.after(1000, self.check_translation_status)
    
    def translation_finished(self):
        """K·∫øt th√∫c qu√° tr√¨nh d·ªãch"""
        # ƒê·∫£m b·∫£o ch·ªâ ch·∫°y m·ªôt l·∫ßn
        if not self.is_translating:
            return  # ƒê√£ ƒë∆∞·ª£c x·ª≠ l√Ω r·ªìi
            
        self.log("üèÅ K·∫øt th√∫c qu√° tr√¨nh d·ªãch...")
        self.is_translating = False
        
        # Restore stdout
        self.restore_stdout()
        
        if is_quota_exceeded():
            # API h·∫øt quota
            self.translate_btn.configure(
                state="normal", 
                text="üîÑ C·∫ßn API Key M·ªõi",
                fg_color=("orange", "darkorange"),
                hover_color=("darkorange", "orange")
            )
            self.progress_text.configure(text="API h·∫øt quota - c·∫ßn API key m·ªõi")
        else:
            # Ki·ªÉm tra xem c√≥ file progress kh√¥ng ƒë·ªÉ x√°c ƒë·ªãnh tr·∫°ng th√°i
            progress_file_path = f"{self.input_file_var.get()}.progress.json"
            
            if is_translation_stopped():
                # D·ªãch b·ªã d·ª´ng
                self.translate_btn.configure(
                    state="normal", 
                    text="‚ñ∂Ô∏è Ti·∫øp T·ª•c D·ªãch",
                    fg_color=("blue", "darkblue"),
                    hover_color=("darkblue", "blue")
                )
                self.progress_text.configure(text="ƒê√£ d·ª´ng - c√≥ th·ªÉ ti·∫øp t·ª•c")
            elif not os.path.exists(progress_file_path):
                # Kh√¥ng c√≥ file progress = d·ªãch ho√†n th√†nh
                self.translate_btn.configure(
                    state="normal", 
                    text="üöÄ B·∫Øt ƒê·∫ßu D·ªãch",
                    fg_color=("blue", "darkblue"),
                    hover_color=("darkblue", "blue")
                )
                self.progress_text.configure(text="‚úÖ D·ªãch ho√†n th√†nh!")
                self.progress_bar.set(1.0)  # Set progress bar to 100%
                self.log("üéâ D·ªãch ho√†n th√†nh th√†nh c√¥ng!")
                
                # T·ª± ƒë·ªông convert EPUB n·∫øu user ch·ªçn
                if self.auto_convert_epub_var.get():
                    self.log("\nüìö B·∫Øt ƒë·∫ßu convert sang EPUB...")
                    output_file = self.output_file_var.get()
                    if output_file and os.path.exists(output_file):
                        try:
                            self.convert_to_epub(output_file)
                        except Exception as e:
                            self.log(f"‚ùå L·ªói khi convert EPUB: {e}")
                    else:
                        self.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file output ƒë·ªÉ convert EPUB")
            else:
                # C√≥ file progress = d·ªãch ch∆∞a ho√†n th√†nh
                self.translate_btn.configure(
                    state="normal", 
                    text="‚ñ∂Ô∏è Ti·∫øp T·ª•c D·ªãch",
                    fg_color=("blue", "darkblue"),
                    hover_color=("darkblue", "blue")
                )
                self.progress_text.configure(text="ƒê√£ d·ª´ng - c√≥ th·ªÉ ti·∫øp t·ª•c")
        
        # Clear translation thread reference
        if hasattr(self, 'translation_thread'):
            self.translation_thread = None
    
    def convert_to_epub(self, txt_file):
        """Convert file to EPUB"""
        if not EPUB_AVAILABLE:
            self.log("‚ùå Kh√¥ng th·ªÉ convert EPUB - thi·∫øu module ConvertEpub")
            return
        
        try:
            # Generate file paths
            base_name = os.path.splitext(txt_file)[0]
            docx_file = base_name + ".docx"
            epub_file = base_name + ".epub"
            
            # Get book info
            title = self.book_title_var.get() or os.path.splitext(os.path.basename(txt_file))[0]
            author = self.book_author_var.get() or "Unknown Author"
            pattern = self.get_chapter_pattern()
            
            # Convert TXT to DOCX
            self.log("üìÑ ƒêang convert TXT ‚Üí DOCX...")
            if txt_to_docx(txt_file, docx_file, title, pattern):
                self.log("‚úÖ Convert TXT ‚Üí DOCX ho√†n th√†nh!")
                
                # Convert DOCX to EPUB
                self.log("üìö ƒêang convert DOCX ‚Üí EPUB...")
                if docx_to_epub(docx_file, epub_file, title, author):
                    self.log(f"‚úÖ Convert EPUB ho√†n th√†nh: {epub_file}")
                else:
                    self.log("‚ùå Convert DOCX ‚Üí EPUB th·∫•t b·∫°i")
            else:
                self.log("‚ùå Convert TXT ‚Üí DOCX th·∫•t b·∫°i")
                
        except Exception as e:
            self.log(f"‚ùå L·ªói convert EPUB: {e}")
    
    def save_settings(self):
        """L∆∞u c√†i ƒë·∫∑t"""
        custom_prompt = ""
        if hasattr(self, 'custom_prompt_textbox'):
            custom_prompt = self.custom_prompt_textbox.get("0.0", "end").strip()
        
        # Get Google AI keys from textbox
        google_ai_keys = []
        if hasattr(self, 'google_ai_keys_textbox'):
            keys_text = self.google_ai_keys_textbox.get("0.0", "end").strip()
            if keys_text:
                for line in keys_text.split('\n'):
                    key = line.strip()
                    if key and not key.startswith('#'):
                        google_ai_keys.append(key)
            
        settings = {
            # API Settings
            "api_provider": self.api_provider_var.get(),
            "openrouter_key": self.openrouter_key_var.get(),
            "google_ai_keys": google_ai_keys,  # New: list of keys
            "google_ai_paid_key": self.google_ai_paid_key_var.get(),
            "google_key_usage": self.google_key_usage_var.get(),
            "google_ai_key": self.google_ai_key_var.get() if hasattr(self, 'google_ai_key_var') else "",  # Deprecated, gi·ªØ l·∫°i ƒë·ªÉ t∆∞∆°ng th√≠ch
            "api_key": self.api_key_var.get(),  # Deprecated, gi·ªØ l·∫°i ƒë·ªÉ t∆∞∆°ng th√≠ch
            "model": self.model_var.get(),
            "saved_custom_models": self.saved_custom_models, # Save the list of custom models
            "model_settings": self.model_settings, # Save model settings
            "context": self.context_var.get(),
            "custom_prompt": custom_prompt,
            "auto_reformat": self.auto_reformat_var.get(),
            "auto_convert_epub": self.auto_convert_epub_var.get(),
            "book_author": self.book_author_var.get(),
            "chapter_pattern": self.chapter_pattern_var.get(),
            "custom_chapter_pattern": self.custom_chapter_pattern_var.get(),
            "threads": self.threads_var.get(),
            "chunk_size": self.chunk_size_var.get()
        }
        
        try:
            with open("settings.json", "w", encoding="utf-8") as f:
                json.dump(settings, f, indent=2, ensure_ascii=False)
            self.log("üíæ ƒê√£ l∆∞u c√†i ƒë·∫∑t")
            show_success("ƒê√£ l∆∞u c√†i ƒë·∫∑t!", parent=self)
        except Exception as e:
            self.log(f"‚ùå L·ªói l∆∞u c√†i ƒë·∫∑t: {e}")
            show_error(f"L·ªói l∆∞u c√†i ƒë·∫∑t: {e}", parent=self)
    
    def load_settings(self):
        """T·∫£i c√†i ƒë·∫∑t"""
        try:
            if os.path.exists("settings.json"):
                with open("settings.json", "r", encoding="utf-8") as f:
                    settings = json.load(f)
                
                # Load API settings
                self.api_provider_var.set(settings.get("api_provider", "OpenRouter"))
                self.openrouter_key_var.set(settings.get("openrouter_key", ""))
                
                # Load Google AI keys (new format: list)
                google_ai_keys = settings.get("google_ai_keys", [])
                if google_ai_keys and isinstance(google_ai_keys, list):
                    # Load multiple keys into textbox
                    if hasattr(self, 'google_ai_keys_textbox'):
                        self.google_ai_keys_textbox.delete("0.0", "end")
                        self.google_ai_keys_textbox.insert("0.0", '\n'.join(google_ai_keys))
                else:
                    # Backward compatibility: load single key if old format
                    old_key = settings.get("google_ai_key", "")
                    if old_key and hasattr(self, 'google_ai_keys_textbox'):
                        self.google_ai_keys_textbox.delete("0.0", "end")
                        self.google_ai_keys_textbox.insert("0.0", old_key)
                
                self.google_ai_paid_key_var.set(settings.get("google_ai_paid_key", ""))
                self.google_key_usage_var.set(settings.get("google_key_usage", "Free Keys"))
                
                # Backward compatibility: n·∫øu c√≥ api_key c≈©, d√πng n√≥ cho OpenRouter
                if not self.openrouter_key_var.get() and settings.get("api_key"):
                    self.openrouter_key_var.set(settings.get("api_key", ""))
                
                self.api_key_var.set(settings.get("api_key", ""))  # Deprecated
                self.model_var.set(settings.get("model", "anthropic/claude-3.5-sonnet"))
                
                # Load saved custom models
                self.saved_custom_models = settings.get("saved_custom_models", [])
                
                # Load model settings
                self.model_settings = settings.get("model_settings", {})
                
                self.context_var.set(settings.get("context", "B·ªëi c·∫£nh hi·ªán ƒë·∫°i"))
                self.auto_reformat_var.set(settings.get("auto_reformat", True))
                self.auto_convert_epub_var.set(settings.get("auto_convert_epub", False))
                self.book_author_var.set(settings.get("book_author", "Unknown Author"))
                self.chapter_pattern_var.set(settings.get("chapter_pattern", "Ch∆∞∆°ng XX:"))
                self.custom_chapter_pattern_var.set(settings.get("custom_chapter_pattern", r"^Ch∆∞∆°ng\s+\d+:\s+.*$"))
                
                # Load threads - n·∫øu kh√¥ng c√≥ trong settings th√¨ auto-detect
                threads_setting = settings.get("threads")
                if threads_setting:
                    self.threads_var.set(threads_setting)
                else:
                    self.auto_detect_threads(silent=True)
                    
                self.chunk_size_var.set(settings.get("chunk_size", "100"))
                
                # Load custom prompt if exists
                if hasattr(self, 'custom_prompt_textbox') and settings.get("custom_prompt"):
                    self.custom_prompt_textbox.delete("0.0", "end")
                    self.custom_prompt_textbox.insert("0.0", settings.get("custom_prompt"))
                
                # Trigger context change to show/hide custom prompt
                self.on_context_changed(self.context_var.get())
                
                # Trigger chapter pattern change to show/hide custom pattern
                self.on_chapter_pattern_changed(self.chapter_pattern_var.get())
                
                # Trigger EPUB setting change to show/hide EPUB frame
                self.on_epub_setting_changed()
                
                # Trigger API provider change to show/hide API key fields
                self.on_api_provider_changed(self.api_provider_var.get())
                self.on_google_key_type_changed(self.google_key_usage_var.get())
                
                self.log("üìÇ ƒê√£ t·∫£i c√†i ƒë·∫∑t")
        except Exception as e:
            self.log(f"‚ö†Ô∏è L·ªói t·∫£i c√†i ƒë·∫∑t: {e}")
    
    def change_appearance_mode_event(self, new_appearance_mode: str):
        """Thay ƒë·ªïi appearance mode"""
        ctk.set_appearance_mode(new_appearance_mode)
    
    def on_closing(self):
        """X·ª≠ l√Ω khi ƒë√≥ng c·ª≠a s·ªï"""
        try:
            if self.is_translating:
                result = show_question("ƒêang d·ªãch. B·∫°n c√≥ ch·∫Øc mu·ªën tho√°t?\n\nTi·∫øn ƒë·ªô s·∫Ω ƒë∆∞·ª£c l∆∞u ƒë·ªÉ ti·∫øp t·ª•c sau.", parent=self)
                if result:
                    # D·ª´ng ti·∫øn tr√¨nh d·ªãch
                    set_stop_translation()
                    self.log("üõë D·ª´ng ti·∫øn tr√¨nh d·ªãch do ƒë√≥ng app...")
                    
                    # ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ translation threads c√≥ th·ªÉ d·ª´ng
                    time.sleep(0.5)
                    
                    self.cleanup_and_exit()
                else:
                    return  # Kh√¥ng ƒë√≥ng app
            else:
                self.cleanup_and_exit()
        except Exception as e:
            print(f"L·ªói khi ƒë√≥ng: {e}")
            # Force exit
            self.destroy()
    
    def cleanup_and_exit(self):
        """Cleanup v√† tho√°t an to√†n"""
        try:
            # Restore stdout
            self.restore_stdout()
            
            # Cancel any running threads
            if hasattr(self, 'translation_thread') and self.translation_thread:
                # Note: Can't force stop threads, just set flag
                self.is_translating = False
            
            # Clear any pending after calls
            self.after_cancel("all")
            
        except Exception as e:
            print(f"L·ªói cleanup: {e}")
        finally:
            # Force destroy
            self.destroy()

    def on_epub_setting_changed(self):
        """X·ª≠ l√Ω khi thay ƒë·ªïi c√†i ƒë·∫∑t auto convert EPUB"""
        if self.auto_convert_epub_var.get():
            self.epub_frame.grid(row=2, column=0, sticky="ew", padx=20, pady=10)
        else:
            self.epub_frame.grid_remove()
    
    def on_chapter_pattern_changed(self, choice):
        """X·ª≠ l√Ω khi thay ƒë·ªïi chapter pattern"""
        pattern_map = {
            "Ch∆∞∆°ng XX:": r"^Ch∆∞∆°ng\s+\d+:\s+.*$",
            "Ch∆∞∆°ng XX": r"^Ch∆∞∆°ng\s+\d+(?:\s+.*)?$",
            "XXX": r"^\d{3}(?:\s+.*)?$",
            "XXX:": r"^\d{3}:\s+.*$",
            "Ph·∫ßn X:": r"^Ph·∫ßn\s+\d+:\s+.*$",
            "Ph·∫ßn X": r"^Ph·∫ßn\s+\d+(?:\s+.*)?$",
            "Chapter X:": r"^Chapter\s+\d+:\s+.*$",
            "Chapter X": r"^Chapter\s+\d+(?:\s+.*)?$",
            "Á¨¨XÁ´†": r"^Á¨¨\d+Á´†(?:\s+.*)?$",
            "Á¨¨XÁ´†:": r"^Á¨¨\d+Á´†:\s+.*$"
        }
        
        if choice == "T√πy ch·ªânh":
            self.custom_pattern_frame.grid(row=5, column=0, sticky="ew", padx=0, pady=0)
        else:
            self.custom_pattern_frame.grid_remove()
            # C·∫≠p nh·∫≠t pattern t∆∞∆°ng ·ª©ng
            if choice in pattern_map:
                self.custom_chapter_pattern_var.set(pattern_map[choice])
    
    def get_current_api_key(self):
        """
        L·∫•y API key(s) hi·ªán t·∫°i d·ª±a tr√™n provider ƒë√£ ch·ªçn.
        - OpenRouter: tr·∫£ v·ªÅ string (1 key)
        - Google AI: tr·∫£ v·ªÅ list (free keys) ho·∫∑c string (paid key)
        """
        provider = self.api_provider_var.get()
        if provider == "OpenRouter":
            return self.openrouter_key_var.get().strip()
        elif provider == "Google AI":
            key_type = self.google_key_usage_var.get()
            if key_type == "Paid Key":
                return self.google_ai_paid_key_var.get().strip()
            else: # Free Keys
                # Get all keys from textbox
                keys_text = self.google_ai_keys_textbox.get("0.0", "end").strip()
                if not keys_text:
                    return []
                
                # Parse keys (1 key per line)
                keys = []
                for line in keys_text.split('\n'):
                    key = line.strip()
                    if key and not key.startswith('#'):  # Skip empty lines and comments
                        keys.append(key)
                
                return keys if keys else []
        return ""
    
    def get_current_provider(self):
        """L·∫•y provider hi·ªán t·∫°i"""
        return self.api_provider_var.get()
    
    def get_current_model(self):
        """L·∫•y model hi·ªán t·∫°i"""
        current_model = self.model_var.get()
        if not current_model:
            # Fallback to default based on provider
            provider = self.get_current_provider()
            if provider == "Google AI":
                return "gemini-2.5-flash"
            else:
                return "anthropic/claude-3.5-sonnet"
        return current_model
    
    def get_chapter_pattern(self):
        """L·∫•y chapter pattern hi·ªán t·∫°i"""
        if self.chapter_pattern_var.get() == "T√πy ch·ªânh":
            return self.custom_chapter_pattern_var.get()
        else:
            pattern_map = {
                "Ch∆∞∆°ng XX:": r"^Ch∆∞∆°ng\s+\d+:\s+.*$",
                "Ch∆∞∆°ng XX": r"^Ch∆∞∆°ng\s+\d+(?:\s+.*)?$",
                "XXX": r"^\d{3}(?:\s+.*)?$",
                "XXX:": r"^\d{3}:\s+.*$",
                "Ph·∫ßn X:": r"^Ph·∫ßn\s+\d+:\s+.*$",
                "Ph·∫ßn X": r"^Ph·∫ßn\s+\d+(?:\s+.*)?$",
                "Chapter X:": r"^Chapter\s+\d+:\s+.*$",
                "Chapter X": r"^Chapter\s+\d+(?:\s+.*)?$",
                "Á¨¨XÁ´†": r"^Á¨¨\d+Á´†(?:\s+.*)?$",
                "Á¨¨XÁ´†:": r"^Á¨¨\d+Á´†:\s+.*$"
            }
            return pattern_map.get(self.chapter_pattern_var.get(), r"^Ch∆∞∆°ng\s+\d+:\s+.*$")

    def run_translation(self, input_file, output_file, api_key, model_name, system_instruction, num_threads, chunk_size, provider="OpenRouter", is_paid_key=False):
        """Ch·∫°y qu√° tr√¨nh d·ªãch"""
        try:
            self.start_time = time.time()
            
            # Log provider being used
            self.log(f"üîë S·ª≠ d·ª•ng {provider} API")
            
            # X√°c ƒë·ªãnh context t·ª´ GUI settings
            context_setting = self.context_var.get()
            if context_setting == "B·ªëi c·∫£nh c·ªï ƒë·∫°i":
                context = "ancient"
            else:
                context = "modern"  # Default cho "B·ªëi c·∫£nh hi·ªán ƒë·∫°i" v√† "T√πy ch·ªânh"
            
            self.log(f"üéØ Context: {context_setting} ‚Üí {'ta' if context == 'ancient' else 't√¥i'}")
            
            # Use regular translation
            success = translate_file_optimized(
                input_file=input_file,
                output_file=output_file,
                api_key=api_key,
                model_name=model_name,
                system_instruction=system_instruction,
                num_workers=num_threads,
                chunk_size_lines=chunk_size,
                provider=provider,
                context=context,
                is_paid_key=is_paid_key
            )
            
            # Re-enable UI elements after completion
            self.after(0, self.translation_finished)
            
            # Post-translation actions
            if success and not is_translation_stopped():
                # X√≥a file progress khi ho√†n th√†nh
                progress_file_path = f"{input_file}.progress.json"
                if os.path.exists(progress_file_path):
                    try:
                        os.remove(progress_file_path)
                        self.log(f"üóëÔ∏è ƒê√£ x√≥a file ti·∫øn ƒë·ªô khi ho√†n th√†nh.")
                    except Exception as e:
                        self.log(f"‚ö†Ô∏è Kh√¥ng th·ªÉ x√≥a file ti·∫øn ƒë·ªô: {e}")

                # Auto reformat
                if self.auto_reformat_var.get():
                    self.log("üîß B·∫Øt ƒë·∫ßu reformat file ƒë√£ d·ªãch...")
                    try:
                        fix_text_format(output_file)
                        self.log("‚úÖ Reformat ho√†n th√†nh!")
                    except Exception as e:
                        self.log(f"‚ö†Ô∏è L·ªói khi reformat: {e}")
                
                # Auto convert to EPUB
                if self.auto_convert_epub_var.get():
                    self.log("üìö B·∫Øt ƒë·∫ßu convert EPUB...")
                    self.convert_to_epub(output_file)
            
        except Exception as e:
            self.log(f"‚ùå L·ªói nghi√™m tr·ªçng trong thread d·ªãch: {e}")
            # Ensure UI is re-enabled even on critical error
            self.after(0, self.translation_finished)

    def show_quota_exceeded_dialog(self):
        """Hi·ªÉn th·ªã dialog khi h·∫øt quota"""
        from tkinter import Toplevel, Text, END, Label
        
        dialog = Toplevel(self)
        dialog.title("üí≥ API H·∫øt Quota")
        dialog.geometry("500x350")
        dialog.transient(self)
        dialog.grab_set()
        dialog.configure(bg=self.cget("bg"))
        
        Label(dialog, text="API Key c·ªßa b·∫°n ƒë√£ h·∫øt quota.", font=ctk.CTkFont(size=14, weight="bold"), bg=self.cget("bg"), fg="white").pack(pady=(20, 10))
        
        text_content = """ƒê·ªÉ ti·∫øp t·ª•c d·ªãch, vui l√≤ng:
1. T·∫°o t√†i kho·∫£n Google Cloud m·ªõi (n·∫øu ch∆∞a c√≥).
2. Nh·∫≠n 300$ credit mi·ªÖn ph√≠.
3. T·∫°o API key m·ªõi t·ª´ ai.google.dev.
4. C·∫≠p nh·∫≠t API key trong app v√† ti·∫øp t·ª•c d·ªãch.

File ti·∫øn ƒë·ªô ƒë√£ ƒë∆∞·ª£c l∆∞u, b·∫°n c√≥ th·ªÉ ti·∫øp t·ª•c d·ªãch ngay sau khi c·∫≠p nh·∫≠t key m·ªõi.
"""
        
        text_widget = Text(dialog, wrap="word", height=10, width=60, font=("Segoe UI", 10), bg="#2b2b2b", fg="white", relief="flat", padx=10, pady=10)
        text_widget.insert(END, text_content)
        text_widget.config(state="disabled")
        text_widget.pack(pady=10, padx=20)
        
        ok_button = ctk.CTkButton(dialog, text="OK", command=dialog.destroy, width=100)
        ok_button.pack(pady=(10, 20))

    def test_api_connection(self):
        """Test API connection in a separate thread."""
        self.log("üß™ ƒêang ki·ªÉm tra k·∫øt n·ªëi API...")
        self.test_api_btn.configure(state="disabled", text="üß™ ƒêang ki·ªÉm tra...")

        provider = self.get_current_provider()
        api_key = self.get_current_api_key()
        model = self.get_current_model()
        
        # For Google AI, test all keys if multiple keys are provided
        if provider == "Google AI" and isinstance(api_key, list):
            if not api_key:
                self.log("‚ùå Vui l√≤ng nh·∫≠p √≠t nh·∫•t m·ªôt Google AI API key.")
                show_error("Vui l√≤ng nh·∫≠p √≠t nh·∫•t m·ªôt Google AI API key.", parent=self)
                self.test_api_btn.configure(state="normal", text="üß™ Test API")
                return
            
            # Test all keys
            self.log(f"üîç S·∫Ω ki·ªÉm tra t·∫•t c·∫£ {len(api_key)} API keys...")
            threading.Thread(target=self._run_multiple_api_test, args=(api_key, model, provider), daemon=True).start()
        else:
            # Single key test
            api_key_to_test = api_key
            if not api_key_to_test:
                provider_name = "OpenRouter" if provider == "OpenRouter" else "Google AI"
                self.log(f"‚ùå Vui l√≤ng nh·∫≠p API key cho {provider_name}.")
                show_error(f"Vui l√≤ng nh·∫≠p API key cho {provider_name}.", parent=self)
                self.test_api_btn.configure(state="normal", text="üß™ Test API")
                return

            threading.Thread(target=self._run_api_test, args=(api_key_to_test, model, provider), daemon=True).start()

    def _run_api_test(self, api_key, model, provider):
        """Worker function to test API."""
        is_valid, message = validate_api_key_before_translation(api_key, model, provider)
        
        def update_ui():
            if is_valid:
                self.log(f"‚úÖ K·∫øt n·ªëi API th√†nh c√¥ng: {message}")
                show_success("K·∫øt n·ªëi API th√†nh c√¥ng!", details=message, parent=self)
            else:
                self.log(f"‚ùå L·ªói k·∫øt n·ªëi API: {message}")
                show_error("K·∫øt n·ªëi API th·∫•t b·∫°i!", details=message, parent=self)
            self.test_api_btn.configure(state="normal", text="üß™ Test API")

        self.after(0, update_ui)
    
    def _run_multiple_api_test(self, api_keys, model, provider):
        """Worker function to test multiple API keys."""
        valid_keys = 0
        invalid_keys = 0
        results = []
        
        for i, api_key in enumerate(api_keys, 1):
            self.after(0, lambda idx=i: self.log(f"üß™ ƒêang test key #{idx}..."))
            
            is_valid, message = validate_api_key_before_translation(api_key, model, provider)
            
            # Mask the key for display
            masked_key = api_key[:8] + "***" + api_key[-4:] if len(api_key) > 12 else "***"
            
            if is_valid:
                valid_keys += 1
                result_msg = f"‚úÖ Key #{i} ({masked_key}): {message}"
                results.append(result_msg)
                self.after(0, lambda msg=result_msg: self.log(msg))
            else:
                invalid_keys += 1
                result_msg = f"‚ùå Key #{i} ({masked_key}): {message}"
                results.append(result_msg)
                self.after(0, lambda msg=result_msg: self.log(msg))
        
        # Final summary
        def update_final_ui():
            summary = f"üìä K·∫øt qu·∫£ test: {valid_keys} keys h·ª£p l·ªá, {invalid_keys} keys l·ªói"
            self.log(summary)
            
            if valid_keys > 0:
                details = f"Keys h·ª£p l·ªá: {valid_keys}/{len(api_keys)}\n\n" + "\n".join(results)
                show_success(f"Test ho√†n th√†nh!\n{summary}", details=details, parent=self)
            else:
                details = "T·∫•t c·∫£ keys ƒë·ªÅu l·ªói:\n\n" + "\n".join(results)
                show_error(f"Test th·∫•t b·∫°i!\n{summary}", details=details, parent=self)
            
            self.test_api_btn.configure(state="normal", text="üß™ Test API")
        
        self.after(0, update_final_ui)
    
    def set_light_mode(self):
        """Chuy·ªÉn sang ch·∫ø ƒë·ªô s√°ng"""
        ctk.set_appearance_mode("light")
        self.log("‚òÄÔ∏è ƒê√£ chuy·ªÉn sang Light Mode")
        self.update_appearance_buttons()
    
    def set_dark_mode(self):
        """Chuy·ªÉn sang ch·∫ø ƒë·ªô t·ªëi"""
        ctk.set_appearance_mode("dark")
        self.log("üåô ƒê√£ chuy·ªÉn sang Dark Mode")
        self.update_appearance_buttons()
    
    def update_appearance_buttons(self):
        """C·∫≠p nh·∫≠t m√†u s·∫Øc c·ªßa n√∫t appearance mode"""
        try:
            current_mode = ctk.get_appearance_mode()
            
            if current_mode == "Light":
                # Light mode active
                self.light_mode_btn.configure(
                    fg_color=("gray75", "gray25"),
                    text_color=("gray10", "gray90")
                )
                self.dark_mode_btn.configure(
                    fg_color=("gray90", "gray13"),
                    text_color=("gray10", "gray90")
                )
            else:
                # Dark mode active
                self.light_mode_btn.configure(
                    fg_color=("gray90", "gray13"),
                    text_color=("gray10", "gray90")
                )
                self.dark_mode_btn.configure(
                    fg_color=("gray75", "gray25"),
                    text_color=("gray10", "gray90")
                )
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói c·∫≠p nh·∫≠t appearance buttons: {e}")

    def open_add_model_dialog(self):
        """M·ªü dialog ƒë·ªÉ th√™m model m·ªõi."""
        
        # T·∫°o c·ª≠a s·ªï Toplevel
        if hasattr(self, 'add_model_window') and self.add_model_window.winfo_exists():
            self.add_model_window.focus()
            return
        
        self.add_model_window = ctk.CTkToplevel(self)
        self.add_model_window.title("Th√™m Model M·ªõi")
        self.add_model_window.geometry("450x300")
        self.add_model_window.transient(self)
        self.add_model_window.grab_set()
        
        self.add_model_window.grid_columnconfigure(0, weight=1)

        # --- Title ---
        title_label = ctk.CTkLabel(self.add_model_window, text="Th√™m Model M·ªõi", font=ctk.CTkFont(size=18, weight="bold"))
        title_label.grid(row=0, column=0, padx=20, pady=(20, 10))

        # --- Model Name Entry ---
        model_name_label = ctk.CTkLabel(self.add_model_window, text="T√™n Model:", font=ctk.CTkFont(size=12, weight="bold"))
        model_name_label.grid(row=1, column=0, padx=20, pady=(10, 5), sticky="w")
        
        self.add_model_entry = ctk.CTkEntry(
            self.add_model_window,
            placeholder_text="V√≠ d·ª•: anthropic/claude-3.5-sonnet",
            width=400
        )
        self.add_model_entry.grid(row=2, column=0, padx=20, pady=5, sticky="ew")
        self.add_model_entry.focus()

        # --- Examples ---
        examples_label = ctk.CTkLabel(
            self.add_model_window, 
            text="V√≠ d·ª• c√°c model ph·ªï bi·∫øn:",
            font=ctk.CTkFont(size=11, weight="bold")
        )
        examples_label.grid(row=3, column=0, padx=20, pady=(15, 5), sticky="w")
        
        examples_text = """‚Ä¢ OpenRouter: anthropic/claude-3.5-sonnet, openai/gpt-4o
‚Ä¢ Google AI: gemini-2.0-flash-exp, gemini-1.5-pro-002
‚Ä¢ Anthropic: claude-3-opus-20240229
‚Ä¢ OpenAI: gpt-4-turbo-preview"""
        
        examples_display = ctk.CTkLabel(
            self.add_model_window,
            text=examples_text,
            font=ctk.CTkFont(size=10),
            justify="left"
        )
        examples_display.grid(row=4, column=0, padx=20, pady=5, sticky="w")

        # --- Buttons ---
        button_frame = ctk.CTkFrame(self.add_model_window, fg_color="transparent")
        button_frame.grid(row=5, column=0, padx=20, pady=(20, 20), sticky="ew")
        button_frame.grid_columnconfigure(0, weight=1)
        button_frame.grid_columnconfigure(1, weight=1)

        cancel_btn = ctk.CTkButton(
            button_frame,
            text="H·ªßy",
            command=self.add_model_window.destroy,
            fg_color="gray",
            hover_color="darkgray"
        )
        cancel_btn.grid(row=0, column=0, padx=(0, 10), sticky="ew")

        add_btn = ctk.CTkButton(
            button_frame,
            text="Th√™m Model",
            command=self._confirm_add_model
        )
        add_btn.grid(row=0, column=1, padx=(10, 0), sticky="ew")
        
        # Bind Enter key to add model
        self.add_model_entry.bind("<Return>", lambda e: self._confirm_add_model())

    def _confirm_add_model(self):
        """X√°c nh·∫≠n th√™m model m·ªõi."""
        model_name = self.add_model_entry.get().strip()
        
        if not model_name:
            show_error("Vui l√≤ng nh·∫≠p t√™n model!", parent=self.add_model_window)
            return
        
        # Validate model format for OpenRouter
        provider = self.get_current_provider()
        if provider == "OpenRouter" and '/' not in model_name:
            result = show_question(
                f"Model '{model_name}' kh√¥ng c√≥ format chu·∫©n 'provider/model-name'.\n\n"
                f"V√≠ d·ª• format ƒë√∫ng: anthropic/claude-3.5-sonnet\n\n"
                f"B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c v·ªõi model n√†y kh√¥ng?",
                parent=self.add_model_window
            )
            if not result:
                return
        
        # Check if model already exists
        if model_name in self.saved_custom_models:
            show_warning(f"Model '{model_name}' ƒë√£ t·ªìn t·∫°i!", parent=self.add_model_window)
            return
        
        # Add to saved models list
        self.saved_custom_models.append(model_name)
        self.saved_custom_models.sort()
        
        # Initialize default settings for the model
        self.model_settings[model_name] = self._get_default_model_settings()
        
        # Update model list and select the new model
        self._update_model_list()
        self.model_var.set(model_name)
        
        # Close dialog
        self.add_model_window.destroy()
        
        # Log and show success
        self.log(f"‚ûï ƒê√£ th√™m model m·ªõi: {model_name}")
        show_success(f"ƒê√£ th√™m model m·ªõi:\n{model_name}", parent=self)

    def _get_default_model_settings(self):
        """L·∫•y c√†i ƒë·∫∑t m·∫∑c ƒë·ªãnh cho model m·ªõi."""
        return {
            "thinking_mode": False,
            "top_p": 1.0,
            "temperature": 1.0,
            "max_tokens": 4096,
            "frequency_penalty": 0.0,
            "presence_penalty": 0.0,
            "repetition_penalty": 1.0,
            "top_k": 0,
            "min_p": 0.0
        }

    def open_model_settings(self):
        """M·ªü dialog c√†i ƒë·∫∑t model."""
        current_model = self.get_current_model()
        
        if not current_model:
            show_error("Vui l√≤ng ch·ªçn model tr∆∞·ªõc!", parent=self)
            return
        
        # T·∫°o c·ª≠a s·ªï Toplevel
        if hasattr(self, 'model_settings_window') and self.model_settings_window.winfo_exists():
            self.model_settings_window.focus()
            return
        
        self.model_settings_window = ctk.CTkToplevel(self)
        self.model_settings_window.title(f"C√†i ƒê·∫∑t Model: {current_model}")
        self.model_settings_window.geometry("500x600")
        self.model_settings_window.transient(self)
        self.model_settings_window.grab_set()
        
        self.model_settings_window.grid_columnconfigure(0, weight=1)
        self.model_settings_window.grid_rowconfigure(1, weight=1)

        # --- Title ---
        title_label = ctk.CTkLabel(
            self.model_settings_window, 
            text=f"C√†i ƒê·∫∑t Model: {current_model}", 
            font=ctk.CTkFont(size=16, weight="bold")
        )
        title_label.grid(row=0, column=0, padx=20, pady=(20, 10))

        # --- Scrollable Frame ---
        settings_frame = ctk.CTkScrollableFrame(self.model_settings_window)
        settings_frame.grid(row=1, column=0, padx=20, pady=10, sticky="nsew")
        settings_frame.grid_columnconfigure(1, weight=1)

        # Get current settings or defaults
        current_settings = self.model_settings.get(current_model, self._get_default_model_settings())
        
        # Store references to entry widgets
        self.settings_widgets = {}
        
        row = 0
        
        # Thinking Mode (checkbox)
        thinking_label = ctk.CTkLabel(settings_frame, text="Thinking Mode:", font=ctk.CTkFont(weight="bold"))
        thinking_label.grid(row=row, column=0, padx=10, pady=5, sticky="w")
        
        self.settings_widgets["thinking_mode"] = ctk.CTkCheckBox(
            settings_frame,
            text="B·∫≠t ch·∫ø ƒë·ªô suy nghƒ© (o1 models)",
            variable=ctk.BooleanVar(value=current_settings.get("thinking_mode", False))
        )
        self.settings_widgets["thinking_mode"].grid(row=row, column=1, padx=10, pady=5, sticky="w")
        row += 1

        # Temperature
        temp_label = ctk.CTkLabel(settings_frame, text="Temperature:", font=ctk.CTkFont(weight="bold"))
        temp_label.grid(row=row, column=0, padx=10, pady=5, sticky="w")
        
        self.settings_widgets["temperature"] = ctk.CTkEntry(
            settings_frame,
            placeholder_text="0.0 - 2.0",
            width=200
        )
        self.settings_widgets["temperature"].insert(0, str(current_settings.get("temperature", 1.0)))
        self.settings_widgets["temperature"].grid(row=row, column=1, padx=10, pady=5, sticky="w")
        row += 1

        # Top P
        top_p_label = ctk.CTkLabel(settings_frame, text="Top P:", font=ctk.CTkFont(weight="bold"))
        top_p_label.grid(row=row, column=0, padx=10, pady=5, sticky="w")
        
        self.settings_widgets["top_p"] = ctk.CTkEntry(
            settings_frame,
            placeholder_text="0.0 - 1.0",
            width=200
        )
        self.settings_widgets["top_p"].insert(0, str(current_settings.get("top_p", 1.0)))
        self.settings_widgets["top_p"].grid(row=row, column=1, padx=10, pady=5, sticky="w")
        row += 1

        # Max Tokens
        max_tokens_label = ctk.CTkLabel(settings_frame, text="Max Tokens:", font=ctk.CTkFont(weight="bold"))
        max_tokens_label.grid(row=row, column=0, padx=10, pady=5, sticky="w")
        
        self.settings_widgets["max_tokens"] = ctk.CTkEntry(
            settings_frame,
            placeholder_text="1 - 32768",
            width=200
        )
        self.settings_widgets["max_tokens"].insert(0, str(current_settings.get("max_tokens", 4096)))
        self.settings_widgets["max_tokens"].grid(row=row, column=1, padx=10, pady=5, sticky="w")
        row += 1

        # Frequency Penalty
        freq_penalty_label = ctk.CTkLabel(settings_frame, text="Frequency Penalty:", font=ctk.CTkFont(weight="bold"))
        freq_penalty_label.grid(row=row, column=0, padx=10, pady=5, sticky="w")
        
        self.settings_widgets["frequency_penalty"] = ctk.CTkEntry(
            settings_frame,
            placeholder_text="-2.0 - 2.0",
            width=200
        )
        self.settings_widgets["frequency_penalty"].insert(0, str(current_settings.get("frequency_penalty", 0.0)))
        self.settings_widgets["frequency_penalty"].grid(row=row, column=1, padx=10, pady=5, sticky="w")
        row += 1

        # Presence Penalty
        pres_penalty_label = ctk.CTkLabel(settings_frame, text="Presence Penalty:", font=ctk.CTkFont(weight="bold"))
        pres_penalty_label.grid(row=row, column=0, padx=10, pady=5, sticky="w")
        
        self.settings_widgets["presence_penalty"] = ctk.CTkEntry(
            settings_frame,
            placeholder_text="-2.0 - 2.0",
            width=200
        )
        self.settings_widgets["presence_penalty"].insert(0, str(current_settings.get("presence_penalty", 0.0)))
        self.settings_widgets["presence_penalty"].grid(row=row, column=1, padx=10, pady=5, sticky="w")
        row += 1

        # Repetition Penalty
        rep_penalty_label = ctk.CTkLabel(settings_frame, text="Repetition Penalty:", font=ctk.CTkFont(weight="bold"))
        rep_penalty_label.grid(row=row, column=0, padx=10, pady=5, sticky="w")
        
        self.settings_widgets["repetition_penalty"] = ctk.CTkEntry(
            settings_frame,
            placeholder_text="0.0 - 2.0",
            width=200
        )
        self.settings_widgets["repetition_penalty"].insert(0, str(current_settings.get("repetition_penalty", 1.0)))
        self.settings_widgets["repetition_penalty"].grid(row=row, column=1, padx=10, pady=5, sticky="w")
        row += 1

        # Top K
        top_k_label = ctk.CTkLabel(settings_frame, text="Top K:", font=ctk.CTkFont(weight="bold"))
        top_k_label.grid(row=row, column=0, padx=10, pady=5, sticky="w")
        
        self.settings_widgets["top_k"] = ctk.CTkEntry(
            settings_frame,
            placeholder_text="0 - 100",
            width=200
        )
        self.settings_widgets["top_k"].insert(0, str(current_settings.get("top_k", 0)))
        self.settings_widgets["top_k"].grid(row=row, column=1, padx=10, pady=5, sticky="w")
        row += 1

        # Min P
        min_p_label = ctk.CTkLabel(settings_frame, text="Min P:", font=ctk.CTkFont(weight="bold"))
        min_p_label.grid(row=row, column=0, padx=10, pady=5, sticky="w")
        
        self.settings_widgets["min_p"] = ctk.CTkEntry(
            settings_frame,
            placeholder_text="0.0 - 1.0",
            width=200
        )
        self.settings_widgets["min_p"].insert(0, str(current_settings.get("min_p", 0.0)))
        self.settings_widgets["min_p"].grid(row=row, column=1, padx=10, pady=5, sticky="w")
        row += 1

        # --- Buttons ---
        button_frame = ctk.CTkFrame(self.model_settings_window, fg_color="transparent")
        button_frame.grid(row=2, column=0, padx=20, pady=(10, 20), sticky="ew")
        button_frame.grid_columnconfigure(0, weight=1)
        button_frame.grid_columnconfigure(1, weight=1)
        button_frame.grid_columnconfigure(2, weight=1)

        reset_btn = ctk.CTkButton(
            button_frame,
            text="Reset",
            command=lambda: self._reset_model_settings(current_model),
            fg_color="orange",
            hover_color="darkorange"
        )
        reset_btn.grid(row=0, column=0, padx=(0, 5), sticky="ew")

        cancel_btn = ctk.CTkButton(
            button_frame,
            text="H·ªßy",
            command=self.model_settings_window.destroy,
            fg_color="gray",
            hover_color="darkgray"
        )
        cancel_btn.grid(row=0, column=1, padx=5, sticky="ew")

        save_btn = ctk.CTkButton(
            button_frame,
            text="L∆∞u",
            command=lambda: self._save_model_settings(current_model)
        )
        save_btn.grid(row=0, column=2, padx=(5, 0), sticky="ew")

    def _reset_model_settings(self, model_name):
        """Reset c√†i ƒë·∫∑t model v·ªÅ m·∫∑c ƒë·ªãnh."""
        default_settings = self._get_default_model_settings()
        
        # Update widgets
        self.settings_widgets["thinking_mode"].deselect() if not default_settings["thinking_mode"] else self.settings_widgets["thinking_mode"].select()
        
        for key, widget in self.settings_widgets.items():
            if key != "thinking_mode":  # Skip checkbox
                widget.delete(0, "end")
                widget.insert(0, str(default_settings[key]))
        
        self.log(f"üîÑ ƒê√£ reset c√†i ƒë·∫∑t model {model_name} v·ªÅ m·∫∑c ƒë·ªãnh")

    def _save_model_settings(self, model_name):
        """L∆∞u c√†i ƒë·∫∑t model."""
        try:
            settings = {}
            
            # Get thinking mode
            settings["thinking_mode"] = self.settings_widgets["thinking_mode"].get()
            
            # Get numeric values
            numeric_fields = ["temperature", "top_p", "frequency_penalty", "presence_penalty", "repetition_penalty", "min_p"]
            integer_fields = ["max_tokens", "top_k"]
            
            for field in numeric_fields:
                try:
                    value = float(self.settings_widgets[field].get())
                    settings[field] = value
                except ValueError:
                    show_error(f"Gi√° tr·ªã '{field}' kh√¥ng h·ª£p l·ªá!", parent=self.model_settings_window)
                    return
            
            for field in integer_fields:
                try:
                    value = int(self.settings_widgets[field].get())
                    settings[field] = value
                except ValueError:
                    show_error(f"Gi√° tr·ªã '{field}' ph·∫£i l√† s·ªë nguy√™n!", parent=self.model_settings_window)
                    return
            
            # Validate ranges
            if not (0.0 <= settings["temperature"] <= 2.0):
                show_error("Temperature ph·∫£i t·ª´ 0.0 ƒë·∫øn 2.0!", parent=self.model_settings_window)
                return
            
            if not (0.0 <= settings["top_p"] <= 1.0):
                show_error("Top P ph·∫£i t·ª´ 0.0 ƒë·∫øn 1.0!", parent=self.model_settings_window)
                return
            
            if not (1 <= settings["max_tokens"] <= 32768):
                show_error("Max Tokens ph·∫£i t·ª´ 1 ƒë·∫øn 32768!", parent=self.model_settings_window)
                return
            
            # Save settings
            self.model_settings[model_name] = settings
            
            # Close dialog
            self.model_settings_window.destroy()
            
            # Log and show success
            self.log(f"üíæ ƒê√£ l∆∞u c√†i ƒë·∫∑t cho model: {model_name}")
            show_success(f"ƒê√£ l∆∞u c√†i ƒë·∫∑t cho model:\n{model_name}", parent=self)
            
        except Exception as e:
            show_error(f"L·ªói l∆∞u c√†i ƒë·∫∑t: {e}", parent=self.model_settings_window)

    def open_model_manager(self):
        """M·ªü dialog qu·∫£n l√Ω custom model."""
        
        # T·∫°o c·ª≠a s·ªï Toplevel
        if hasattr(self, 'model_manager_window') and self.model_manager_window.winfo_exists():
            self.model_manager_window.focus()
            return
        
        self.model_manager_window = ctk.CTkToplevel(self)
        self.model_manager_window.title("Qu·∫£n l√Ω Model T√πy Ch·ªânh")
        self.model_manager_window.geometry("600x500")
        self.model_manager_window.transient(self)
        self.model_manager_window.grab_set()
        
        self.model_manager_window.grid_columnconfigure(0, weight=1)
        self.model_manager_window.grid_rowconfigure(1, weight=1)

        # --- Label ---
        label = ctk.CTkLabel(self.model_manager_window, text="Danh s√°ch Model ƒê√£ L∆∞u", font=ctk.CTkFont(size=16, weight="bold"))
        label.grid(row=0, column=0, padx=20, pady=(20, 10))

        # --- Scrollable Frame for models ---
        self.model_list_frame = ctk.CTkScrollableFrame(self.model_manager_window)
        self.model_list_frame.grid(row=1, column=0, padx=20, pady=10, sticky="nsew")
        self.model_list_frame.grid_columnconfigure(0, weight=1)

        # --- Populate models ---
        self._populate_model_manager()

        # --- Close button ---
        close_button = ctk.CTkButton(self.model_manager_window, text="ƒê√≥ng", command=self.model_manager_window.destroy)
        close_button.grid(row=2, column=0, padx=20, pady=(10, 20))

    def _populate_model_manager(self):
        """X√≥a v√† ƒëi·ªÅn l·∫°i danh s√°ch model trong c·ª≠a s·ªï qu·∫£n l√Ω."""
        # Clear existing widgets
        for widget in self.model_list_frame.winfo_children():
            widget.destroy()

        if not self.saved_custom_models:
            no_models_label = ctk.CTkLabel(self.model_list_frame, text="Ch∆∞a c√≥ model t√πy ch·ªânh n√†o ƒë∆∞·ª£c l∆∞u.")
            no_models_label.pack(pady=20)
            return

        # Add models to the list
        for i, model_name in enumerate(sorted(self.saved_custom_models)):
            row_frame = ctk.CTkFrame(self.model_list_frame, fg_color="transparent")
            row_frame.grid(row=i, column=0, pady=(5, 0), sticky="ew")
            row_frame.grid_columnconfigure(0, weight=1)

            model_label = ctk.CTkLabel(row_frame, text=model_name, anchor="w", font=ctk.CTkFont(weight="bold"))
            model_label.grid(row=0, column=0, padx=10, sticky="w")
            
            # Show settings info
            settings = self.model_settings.get(model_name, {})
            settings_info = f"T:{settings.get('temperature', 1.0)} | P:{settings.get('top_p', 1.0)} | Max:{settings.get('max_tokens', 4096)}"
            if settings.get('thinking_mode', False):
                settings_info = "üß† " + settings_info
            
            settings_label = ctk.CTkLabel(row_frame, text=settings_info, anchor="w", font=ctk.CTkFont(size=10), text_color="gray")
            settings_label.grid(row=1, column=0, padx=10, sticky="w")
            
            # Button frame
            btn_frame = ctk.CTkFrame(row_frame, fg_color="transparent")
            btn_frame.grid(row=0, column=1, rowspan=2, padx=10)
            
            settings_btn = ctk.CTkButton(
                btn_frame,
                text="‚öôÔ∏è",
                command=lambda m=model_name: self._edit_model_settings(m),
                width=30,
                height=25,
                fg_color="transparent",
                border_color=("gray70", "gray30"),
                border_width=1,
                hover_color=("blue", "#0066cc")
            )
            settings_btn.grid(row=0, column=0, padx=(0, 5))
            
            delete_btn = ctk.CTkButton(
                btn_frame,
                text="üóëÔ∏è",
                command=lambda m=model_name: self._delete_custom_model(m),
                width=30,
                height=25,
                fg_color="transparent",
                border_color=("gray70", "gray30"),
                border_width=1,
                hover_color=("red", "#990000")
            )
            delete_btn.grid(row=0, column=1)

    def _edit_model_settings(self, model_name):
        """M·ªü dialog ch·ªânh s·ª≠a settings cho model c·ª• th·ªÉ."""
        # Temporarily set the model to edit its settings
        original_model = self.model_var.get()
        self.model_var.set(model_name)
        
        # Close model manager window
        if hasattr(self, 'model_manager_window'):
            self.model_manager_window.destroy()
        
        # Open model settings
        self.open_model_settings()
        
        # Restore original model selection after settings dialog closes
        def restore_model():
            if hasattr(self, 'model_settings_window') and self.model_settings_window.winfo_exists():
                self.after(100, restore_model)
            else:
                self.model_var.set(original_model)
                # Reopen model manager
                self.after(100, self.open_model_manager)
        
        restore_model()

    def _delete_custom_model(self, model_to_delete):
        """X√≥a m·ªôt model t√πy ch·ªânh kh·ªèi danh s√°ch ƒë√£ l∆∞u."""
        result = show_question(
            f"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a model '{model_to_delete}' kh√¥ng?\n\nC√†i ƒë·∫∑t c·ªßa model n√†y c≈©ng s·∫Ω b·ªã x√≥a.",
            parent=self.model_manager_window
        )
        
        if not result:
            return
            
        if model_to_delete in self.saved_custom_models:
            self.saved_custom_models.remove(model_to_delete)
            
            # Remove model settings
            if model_to_delete in self.model_settings:
                del self.model_settings[model_to_delete]
            
            # N·∫øu model ƒëang ƒë∆∞·ª£c ch·ªçn b·ªã x√≥a, reset v·ªÅ model m·∫∑c ƒë·ªãnh
            if self.model_var.get() == model_to_delete:
                self.model_var.set(self._get_default_model())
                
            self._update_model_list() # C·∫≠p nh·∫≠t combobox ch√≠nh
            self._populate_model_manager() # C·∫≠p nh·∫≠t c·ª≠a s·ªï qu·∫£n l√Ω
            
            self.log(f"üóëÔ∏è ƒê√£ x√≥a model t√πy ch·ªânh: {model_to_delete}")
            show_toast_success(f"ƒê√£ x√≥a model: {model_to_delete}")
        else:
            show_toast_error(f"Kh√¥ng t√¨m th·∫•y model: {model_to_delete}")

    def _get_default_model(self):
        """L·∫•y model m·∫∑c ƒë·ªãnh d·ª±a tr√™n provider hi·ªán t·∫°i."""
        provider = self.api_provider_var.get()
        if provider == "Google AI":
            return "gemini-2.5-flash"
        else: # OpenRouter
            return "anthropic/claude-3.5-sonnet"

if __name__ == "__main__":
    app = ModernTranslateNovelAI()
    app.protocol("WM_DELETE_WINDOW", app.on_closing)
    app.mainloop()